var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddDescriptionDTO.html",[0,0.014,1,2.153]],["body/classes/AddDescriptionDTO.html",[0,0.022,1,3.532,2,1.469,3,0.307,4,0.262,5,0.262,6,4.906,7,3.649,8,0.402,9,1.354,10,4.906,11,1.836,12,0.691,13,0.028,14,1.354,15,1.57,16,4.34,17,1.074,18,4.34,19,1.959,20,3.836,21,4.34,22,0.504,23,2.915,24,2.355,25,2.355,26,1.992,27,0.262,28,3.649,29,4.34,30,0.018,31,0.023,32,0.018]],["title/controllers/AppController.html",[33,1.631,34,2.153]],["body/controllers/AppController.html",[0,0.018,3,0.315,4,0.269,5,0.269,8,0.413,13,0.029,14,1.376,15,1.303,17,0.891,22,0.634,27,0.269,30,0.019,31,0.023,32,0.019,33,2.72,34,3.591,35,2.22,36,3.748,37,2.317,38,5.176,39,4.459,40,1.891,41,1.303,42,3.205,43,3.748,44,2.931,45,4.459,46,1.752,47,4.459]],["title/modules/AppModule.html",[48,1.777,49,2.153]],["body/modules/AppModule.html",[0,0.016,3,0.273,4,0.233,5,0.233,13,0.029,22,0.733,27,0.233,30,0.016,31,0.021,32,0.016,34,3.635,35,2.486,41,1.129,42,3.364,43,3.248,48,2.709,49,4.282,50,2.096,51,2.709,52,3.248,53,3.248,54,3.248,55,3.687,56,3.364,57,3.281,58,2.54,59,2.54,60,3.864,61,3.673,62,3.673,63,2.843,64,2.096,65,3.864,66,3.864,67,2.843,68,3.864,69,3.864,70,3.864]],["title/injectables/AppService.html",[42,1.777,71,0.889]],["body/injectables/AppService.html",[0,0.019,3,0.329,4,0.28,5,0.28,8,0.43,13,0.028,14,1.412,17,0.929,22,0.54,27,0.28,30,0.02,31,0.024,32,0.02,37,2.377,38,5.25,40,1.972,41,1.359,42,3.041,46,1.827,71,1.521,72,2.134,73,3.909,74,4.65,75,4.65]],["title/classes/CreateTaskDTO.html",[0,0.014,76,2.153]],["body/classes/CreateTaskDTO.html",[0,0.022,2,1.404,3,0.293,4,0.25,5,0.25,8,0.384,9,1.316,11,1.798,12,0.735,13,0.028,14,1.316,15,1.671,17,1.142,19,2.188,20,4.065,22,0.482,23,2.833,24,2.25,25,2.25,26,1.903,27,0.25,30,0.018,31,0.022,32,0.018,76,3.433,77,5.045,78,2.726,79,4.806,80,3.758,81,4.147,82,3.486,83,3.051,84,3.486,85,2.726,86,2.726]],["title/interfaces/CurrentUser.html",[87,1.194,88,1.631]],["body/interfaces/CurrentUser.html",[3,0.33,4,0.281,5,0.281,8,0.432,9,1.415,11,1.967,12,0.722,13,0.028,14,1.518,19,2.197,27,0.281,30,0.02,31,0.024,32,0.02,87,1.701,88,2.797,89,2.532,90,2.532,91,3.923,92,2.652]],["title/classes/DateEntity.html",[0,0.014,93,1.631]],["body/classes/DateEntity.html",[0,0.015,2,1.256,3,0.262,4,0.224,5,0.224,8,0.343,9,1.225,11,1.706,12,0.789,13,0.029,15,1.682,17,1.15,19,1.772,22,0.565,27,0.224,30,0.016,31,0.021,32,0.016,93,2.421,94,3.119,95,2.231,96,3.565,97,2.742,98,5.423,99,2.688,100,3.196,101,3.196,102,3.577,103,3.71,104,3.565,105,3.71,106,3.196,107,2.891,108,3.71,109,2.729,110,3.71,111,3.565,112,2.438,113,3.577,114,1.847,115,2.438,116,3.71,117,2.891,118,2.438,119,3.119]],["title/classes/EditTimeOfTaskDTO.html",[0,0.014,120,2.153]],["body/classes/EditTimeOfTaskDTO.html",[0,0.022,2,1.474,3,0.308,4,0.262,5,0.262,8,0.403,9,1.357,11,1.839,12,0.692,13,0.028,15,1.574,17,1.076,19,1.963,20,3.842,22,0.506,26,1.998,27,0.262,30,0.018,31,0.023,32,0.018,78,2.862,97,2.471,120,3.539,121,4.914,122,4.201,123,4.355,124,5.845,125,4.355]],["title/injectables/JwtAuthGuard.html",[71,0.889,126,2.153]],["body/injectables/JwtAuthGuard.html",[0,0.02,3,0.341,4,0.291,5,0.291,13,0.028,22,0.665,27,0.291,30,0.02,31,0.024,32,0.02,41,1.409,71,1.555,72,2.213,95,2.213,126,3.765,127,3.548,128,3.548,129,4.054,130,2.616,131,4.822]],["title/injectables/JwtStrategy.html",[71,0.889,132,1.948]],["body/injectables/JwtStrategy.html",[0,0.016,3,0.281,4,0.24,5,0.24,8,0.369,11,1.252,12,0.512,13,0.029,17,1.017,22,0.687,27,0.24,30,0.017,31,0.022,32,0.017,37,2.159,40,1.689,41,1.164,46,1.565,71,1.382,72,1.827,92,1.689,95,1.827,130,2.16,132,3.027,133,3.347,134,2.793,135,4.279,136,3.687,137,3.982,138,5.09,139,3.982,140,1.983,141,1.827,142,1.983,143,3.347,144,3.347,145,3.982,146,3.347,147,2.929,148,2.929,149,3.347,150,2.368,151,2.929,152,3.347,153,3.347,154,3.982,155,3.982,156,3.982,157,2.16,158,3.982,159,2.929,160,3.982,161,3.347]],["title/injectables/LocalAuthGuard.html",[71,0.889,162,2.41]],["body/injectables/LocalAuthGuard.html",[0,0.02,3,0.341,4,0.291,5,0.291,13,0.028,22,0.665,27,0.291,30,0.02,31,0.024,32,0.02,41,1.409,71,1.555,72,2.213,95,2.213,128,3.548,129,4.054,130,2.616,162,4.214,163,4.054,164,4.822]],["title/injectables/LocalStrategy.html",[71,0.889,165,1.948]],["body/injectables/LocalStrategy.html",[0,0.016,3,0.265,4,0.226,5,0.226,8,0.347,12,0.63,13,0.029,14,1.55,17,0.979,22,0.671,27,0.226,30,0.016,31,0.021,32,0.016,37,2.078,40,1.592,41,1.097,44,2.466,46,1.475,71,1.33,72,1.722,92,1.592,95,1.722,130,2.036,134,2.715,135,4.118,136,2.466,140,2.439,141,2.248,142,2.439,146,3.155,147,2.761,149,3.155,152,3.155,153,3.155,165,2.913,166,3.155,167,3.753,168,2.653,169,3.753,170,4.118,171,4.898,172,3.137,173,3.753,174,2.658,175,3.155,176,3.604,177,2.761,178,2.466,179,1.988,180,2.466,181,3.753,182,2.761,183,2.466]],["title/interfaces/LoginResponse.html",[87,1.194,184,1.948]],["body/interfaces/LoginResponse.html",[3,0.331,4,0.282,5,0.282,8,0.434,9,1.418,12,0.724,13,0.028,14,1.639,27,0.282,30,0.02,31,0.024,32,0.02,87,1.707,89,2.541,184,3.347,185,3.937,186,5.263,187,3.397]],["title/classes/LoginUserDTO.html",[0,0.014,188,1.948]],["body/classes/LoginUserDTO.html",[0,0.022,2,1.464,3,0.306,4,0.261,5,0.261,8,0.4,9,1.351,12,0.69,13,0.028,14,1.535,15,1.567,17,1.071,22,0.502,23,3.162,24,2.347,25,2.347,26,1.985,27,0.261,30,0.018,31,0.023,32,0.018,83,3.182,85,2.843,86,3.524,92,2.472,172,3.162,188,3.189,189,4.899,190,3.182,191,4.326,192,4.326,193,4.326,194,3.636]],["title/classes/RenameTaskDTO.html",[0,0.014,195,2.153]],["body/classes/RenameTaskDTO.html",[0,0.022,2,1.469,3,0.307,4,0.262,5,0.262,8,0.402,9,1.354,11,1.836,12,0.691,13,0.028,14,1.354,15,1.57,17,1.074,19,1.959,20,3.836,22,0.504,23,2.915,24,2.355,25,2.355,26,1.992,27,0.262,30,0.018,31,0.023,32,0.018,78,2.853,80,3.836,82,3.649,83,3.193,84,3.649,85,2.853,86,2.853,195,3.532,196,4.906]],["title/interfaces/ResponseMessage.html",[87,1.194,197,1.631]],["body/interfaces/ResponseMessage.html",[3,0.341,4,0.291,5,0.291,8,0.446,9,1.443,12,0.62,13,0.027,14,1.539,27,0.291,30,0.02,31,0.024,32,0.02,87,1.758,89,2.616,187,3.43,197,2.852,198,2.616,199,4.054]],["title/classes/SignupUserDTO.html",[0,0.014,200,1.948]],["body/classes/SignupUserDTO.html",[0,0.016,2,0.911,3,0.19,4,0.162,5,0.162,8,0.249,9,0.981,12,0.501,13,0.03,14,1.264,15,1.138,17,0.778,22,0.312,23,2.484,24,1.46,25,1.46,26,1.235,27,0.162,28,3.274,30,0.011,31,0.017,32,0.011,86,2.56,92,1.942,172,2.484,187,3.429,190,1.979,194,3.274,200,2.316,201,3.849,202,3.274,203,3.274,204,3.895,205,3.895,206,3.895,207,2.691,208,3.895,209,2.691,210,3.849,211,2.691]],["title/classes/Task.html",[0,0.014,99,1.39]],["body/classes/Task.html",[0,0.012,2,0.95,3,0.198,4,0.169,5,0.169,8,0.26,9,1.012,11,1.475,12,0.805,13,0.029,14,1.289,15,1.764,17,1.206,19,1.464,22,0.544,27,0.169,30,0.012,31,0.017,32,0.012,80,3.081,93,2.548,95,1.842,96,3.081,97,2.721,99,2.389,100,2.639,101,3.363,102,3.764,104,3.081,106,2.639,107,3.643,109,2.954,111,3.702,112,2.639,113,3.449,114,1.397,117,2.388,118,1.845,157,2.178,179,2.162,212,2.359,213,3.941,214,3.941,215,3.941,216,3.941,217,3.941,218,2.807,219,2.359,220,4.302,221,4.015,222,2.807,223,4.015,224,4.302,225,2.807,226,2.807,227,2.807,228,2.807,229,2.807,230,2.807,231,2.807,232,2.807,233,2.359,234,3.375,235,1.845,236,2.359,237,2.807,238,2.359]],["title/interfaces/TaskWithSubTasks.html",[87,1.194,239,1.948]],["body/interfaces/TaskWithSubTasks.html",[3,0.325,4,0.277,5,0.277,8,0.426,9,1.403,12,0.716,13,0.028,22,0.534,27,0.277,30,0.02,31,0.024,32,0.02,87,1.677,89,2.496,99,2.853,239,3.311,240,3.868,241,5.231,242,3.868]],["title/controllers/TasksController.html",[33,1.631,243,2.153]],["body/controllers/TasksController.html",[0,0.006,1,2.786,3,0.1,4,0.085,5,0.085,8,0.131,11,1.816,12,0.706,13,0.029,15,1.605,17,1.097,19,2.032,22,0.647,27,0.085,30,0.006,31,0.01,32,0.006,33,0.705,35,0.705,37,1,40,2.329,41,0.414,44,0.931,46,2.157,76,2.786,88,3.345,90,0.768,93,0.705,97,2.519,99,0.6,115,0.931,120,2.955,122,0.931,126,0.931,127,1.042,134,3.207,140,2.734,141,2.519,142,2.734,174,3.35,195,2.786,197,0.705,198,0.768,235,0.931,239,0.842,243,1.55,244,1.19,245,1.416,246,1.19,247,2.547,248,2.547,249,2.547,250,2.547,251,2.547,252,2.547,253,2.547,254,2.547,255,1.982,256,2.547,257,2.547,258,3.03,259,2.547,260,2.547,261,1.416,262,2.358,263,1.416,264,1.416,265,2.358,266,1.416,267,1.19,268,2.358,269,1.416,270,1.416,271,2.358,272,1.416,273,1.19,274,2.358,275,1.416,276,1.416,277,2.358,278,1.416,279,1.19,280,2.358,281,1.416,282,1.19,283,2.358,284,1.416,285,1.19,286,2.358,287,1.416,288,1.19,289,2.358,290,1.416,291,1.19,292,2.358,293,1.416,294,1.416,295,2.358,296,1.416,297,1.19,298,2.358,299,1.416,300,1.416,301,2.358,302,1.416,303,4.11,304,1.19,305,1.416,306,1.19,307,1.416,308,0.931,309,0.931,310,1.19,311,0.842,312,0.931,313,0.931,314,1.19,315,3.609,316,1.042,317,1.19,318,1.416,319,1.416,320,1.416,321,1.416,322,3.03,323,1.416,324,1.416,325,1.644,326,1.19,327,0.705,328,1.042,329,1.416,330,1.416,331,1.416,332,1.416,333,1.416,334,1.416,335,1.416,336,1.416,337,3.03,338,1.416,339,1.416,340,1.416,341,1.416,342,1.416,343,1.416,344,1.416,345,1.416,346,1.416,347,1.416,348,1.416,349,1.416,350,1.416,351,1.416,352,1.416,353,1.416,354,1.416,355,1.416]],["title/modules/TasksModule.html",[48,1.777,55,1.948]],["body/modules/TasksModule.html",[0,0.016,3,0.272,4,0.232,5,0.232,13,0.029,22,0.742,27,0.232,30,0.016,31,0.021,32,0.016,35,2.481,41,1.126,48,2.703,50,2.09,51,2.703,55,3.799,56,3.361,57,3.275,58,2.532,59,2.532,61,3.666,62,3.666,63,2.834,64,2.09,93,2.481,99,1.634,115,2.532,235,2.532,243,3.63,325,3.361,326,3.239,327,2.481,328,2.834,356,3.239,357,3.239,358,3.852,359,3.852,360,3.852,361,3.852,362,3.852]],["title/injectables/TasksService.html",[71,0.889,325,1.777]],["body/injectables/TasksService.html",[0,0.003,3,0.05,4,0.042,5,0.042,8,0.065,10,1.821,11,1.793,12,0.566,13,0.029,14,0.887,17,0.88,19,1.977,22,0.45,27,0.042,30,0.003,31,0.005,32,0.003,37,0.543,40,1.819,41,0.206,46,1.582,64,0.382,71,0.347,72,0.323,79,2.114,80,2.178,88,3.1,90,0.382,92,0.746,93,0.876,97,2.64,99,2.262,107,0.761,114,0.35,115,0.463,119,1.076,122,1.653,134,2.878,136,0.841,140,2.193,141,2.021,142,2.193,157,0.955,168,0.994,170,1.479,174,2.868,176,3.155,178,3.782,179,2.133,180,3.726,182,3.726,183,3.846,187,1.672,197,0.35,198,0.382,215,1.076,216,2.786,217,1.076,235,0.463,236,0.592,238,1.821,239,0.761,241,1.076,246,1.076,247,1.479,248,1.479,249,1.479,250,1.479,251,1.479,252,1.479,253,1.479,254,1.479,255,1.076,256,1.479,257,1.076,259,1.479,260,1.479,267,0.592,273,0.592,279,0.592,282,0.592,285,1.076,288,0.592,291,0.592,297,0.592,308,0.463,309,0.463,310,0.592,311,0.418,312,0.463,313,0.463,314,0.592,325,0.694,327,0.876,328,0.518,363,0.592,364,1.76,365,0.704,366,2.727,367,1.76,368,1.76,369,0.704,370,1.28,371,0.704,372,0.704,373,0.704,374,0.704,375,0.704,376,0.704,377,0.704,378,2.166,379,0.704,380,0.704,381,0.704,382,0.704,383,0.704,384,0.704,385,0.704,386,1.76,387,0.704,388,0.704,389,0.704,390,2.166,391,0.704,392,0.704,393,0.704,394,1.76,395,2.961,396,0.592,397,0.704,398,2.166,399,0.704,400,0.704,401,0.704,402,1.821,403,0.704,404,0.704,405,4.026,406,3.081,407,3.081,408,2.817,409,3.117,410,1.76,411,1.76,412,0.704,413,1.479,414,0.704,415,2.267,416,1.76,417,2.267,418,2.267,419,2.072,420,1.28,421,1.28,422,0.704,423,1.28,424,0.592,425,0.704,426,1.076,427,0.704,428,0.704,429,0.704,430,2.166,431,2.166,432,1.479,433,1.76,434,1.76,435,0.592,436,1.76,437,2.166,438,0.518,439,0.704,440,0.704,441,0.592,442,0.704,443,0.704,444,0.592,445,1.76,446,1.28,447,0.704,448,1.28,449,1.28,450,0.704,451,0.704,452,0.704,453,0.592,454,1.76,455,0.704,456,0.704,457,1.28,458,4.656,459,1.28,460,1.28,461,2.817,462,0.704,463,1.28,464,0.704,465,1.28,466,1.821,467,1.821,468,0.704,469,1.28,470,0.704,471,0.704,472,1.28,473,0.704,474,0.704,475,1.28,476,1.28,477,0.704,478,0.704,479,0.704,480,0.704,481,1.28,482,0.704,483,0.704,484,3.081,485,0.704,486,0.704,487,0.704,488,0.704,489,0.704,490,0.704,491,1.28,492,1.28,493,1.28,494,1.28,495,1.76,496,0.704,497,0.704,498,1.28,499,0.704,500,0.704,501,1.28,502,0.704,503,0.704,504,0.704,505,0.704,506,0.704,507,0.704]],["title/interfaces/TimeEditLimitation.html",[87,1.194,311,1.948]],["body/interfaces/TimeEditLimitation.html",[3,0.329,4,0.28,5,0.28,8,0.43,9,1.412,12,0.721,13,0.028,27,0.28,30,0.02,31,0.024,32,0.02,87,1.695,89,2.523,97,2.979,311,3.333,312,3.056,313,3.056,466,5.25,467,5.25,508,3.909]],["title/classes/Timesheet.html",[0,0.014,327,1.631]],["body/classes/Timesheet.html",[0,0.015,2,1.263,3,0.264,4,0.225,5,0.225,8,0.345,9,1.229,11,1.711,12,0.742,13,0.029,15,1.686,17,1.153,19,1.779,22,0.567,27,0.225,30,0.016,31,0.021,32,0.016,95,2.239,96,3.575,97,2.747,100,2.452,101,3.208,104,3.575,106,3.208,107,2.902,109,2.745,111,3.208,112,3.208,113,3.59,114,1.858,117,3.234,118,2.452,179,2.313,233,3.136,327,2.43,453,4.572,509,3.136,510,4.88,511,3.731,512,3.731,513,3.731,514,3.731,515,3.731]],["title/classes/UpdateProfileDTO.html",[0,0.014,516,1.948]],["body/classes/UpdateProfileDTO.html",[0,0.019,2,1.133,3,0.237,4,0.202,5,0.202,8,0.31,9,1.144,12,0.584,13,0.03,14,1.392,15,1.327,17,0.907,22,0.389,23,2.463,24,1.816,25,1.816,26,1.536,27,0.202,30,0.014,31,0.019,32,0.014,85,2.984,141,2.364,187,3.407,202,3.816,203,2.814,210,4.331,516,2.7,517,4.331,518,2.814,519,4.331,520,5.152,521,3.348,522,4.54,523,3.348]],["title/classes/User.html",[0,0.014,179,1.194]],["body/classes/User.html",[0,0.011,2,0.877,3,0.183,4,0.156,5,0.156,8,0.24,9,0.954,11,1.409,12,0.793,13,0.029,14,1.582,15,1.73,17,1.202,19,1.381,22,0.572,27,0.156,30,0.011,31,0.016,32,0.011,37,1.607,40,1.098,46,1.017,92,1.9,95,1.738,96,2.944,97,1.738,99,2.461,100,2.489,101,2.944,102,2.786,104,2.944,106,2.944,107,3.45,111,3.813,112,2.489,114,1.289,117,2.252,118,1.702,134,2.23,140,1.289,141,2.261,142,1.289,157,2.055,172,2.845,174,2.055,179,1.381,180,1.702,213,3.765,219,3.184,220,3.184,224,3.184,234,3.765,242,2.176,327,2.889,413,2.176,415,1.905,417,1.905,418,1.905,419,1.905,435,2.176,438,1.905,519,4.143,524,2.176,525,3.765,526,4.479,527,2.589,528,3.788,529,2.589,530,2.589,531,2.589,532,2.589,533,2.589,534,2.589,535,2.589,536,2.589,537,2.589,538,2.589,539,4.928,540,2.589,541,2.786,542,2.589,543,2.589,544,2.589,545,4.479,546,2.589]],["title/controllers/UsersController.html",[33,1.631,547,2.153]],["body/controllers/UsersController.html",[0,0.012,3,0.202,4,0.172,5,0.172,8,0.264,12,0.663,13,0.029,15,1.507,17,1.031,22,0.714,27,0.172,30,0.012,31,0.017,32,0.012,33,2.024,35,1.422,37,1.724,40,2.188,41,0.835,44,1.877,46,2.027,88,3.097,90,1.549,134,3.128,140,2.568,141,2.367,142,2.568,168,2.172,174,3.232,177,2.101,179,1.041,184,1.698,188,3.369,197,1.422,198,1.549,200,3.369,303,3.417,306,2.401,308,1.877,309,1.877,315,2.672,317,2.401,516,3.543,547,2.672,548,2.401,549,3.417,550,3.417,551,3.417,552,3.979,553,2.401,554,4.065,555,2.856,556,2.856,557,4.065,558,2.856,559,2.401,560,4.065,561,2.856,562,2.401,563,4.065,564,2.856,565,2.401,566,2.401,567,3.417,568,2.401,569,2.401,570,2.401,571,2.101,572,2.856,573,2.856,574,2.856,575,2.856,576,2.856,577,2.856,578,2.856]],["title/modules/UsersModule.html",[48,1.777,56,1.777]],["body/modules/UsersModule.html",[0,0.014,3,0.245,4,0.209,5,0.209,13,0.029,22,0.742,27,0.209,30,0.015,31,0.02,32,0.015,35,2.313,41,1.012,48,2.52,50,1.879,51,2.52,56,3.497,57,3.053,58,2.276,59,2.276,61,3.417,62,2.548,63,2.548,64,1.879,130,1.879,132,3.576,148,2.548,150,2.059,151,2.548,159,2.548,165,3.576,168,2.979,177,2.548,179,1.263,547,3.445,571,2.548,579,2.911,580,2.911,581,2.911,582,3.463,583,4.645,584,3.463,585,2.548,586,3.463,587,3.463,588,3.463,589,3.463,590,3.463,591,3.463,592,3.463,593,3.463,594,2.548,595,3.463,596,3.463,597,3.463]],["title/injectables/UsersService.html",[71,0.889,168,1.503]],["body/injectables/UsersService.html",[0,0.007,3,0.232,4,0.096,5,0.096,8,0.147,11,0.499,12,0.634,13,0.029,14,1.38,17,1.019,22,0.647,27,0.096,30,0.014,31,0.011,32,0.007,37,1.099,40,2.091,41,0.464,46,1.937,64,0.861,71,0.703,72,0.728,88,2.612,90,0.861,92,2.163,114,0.79,134,3.016,136,1.702,140,2.454,141,2.262,142,2.454,143,1.334,150,0.943,151,1.167,157,0.861,159,1.905,161,1.334,168,1.189,172,1.405,174,3.148,176,3.072,178,3.53,179,2.032,180,3.53,182,3.626,183,3.352,184,0.943,186,2.177,187,1.781,188,2.253,197,0.79,198,0.861,200,2.664,304,1.334,308,1.043,309,1.043,366,2.787,395,2.177,396,1.334,402,2.177,409,2.759,415,1.905,417,1.905,418,1.905,419,1.167,424,1.334,426,1.334,438,1.167,441,2.177,444,1.334,516,2.81,525,1.334,541,1.905,549,2.177,550,2.177,551,2.177,552,2.759,553,2.177,559,2.177,562,1.334,565,1.334,566,1.334,567,2.177,568,1.334,569,1.334,570,1.334,571,1.167,585,1.167,594,1.905,598,1.334,599,3.789,600,2.59,601,2.59,602,2.59,603,1.586,604,4.726,605,1.586,606,2.59,607,1.586,608,2.59,609,1.586,610,1.586,611,2.59,612,1.586,613,2.59,614,1.586,615,1.586,616,1.586,617,2.59,618,3.789,619,1.586,620,3.282,621,2.59,622,1.586,623,1.586,624,2.59,625,1.586,626,1.586,627,3.789,628,1.586,629,2.59,630,2.59,631,1.586,632,1.586,633,2.59,634,1.586,635,1.586,636,2.59,637,2.59,638,2.59,639,2.59,640,1.586,641,1.586,642,1.586,643,1.586,644,1.586,645,1.334,646,1.586,647,1.586,648,1.586,649,1.586,650,1.586,651,1.586,652,1.586,653,1.586,654,2.59,655,1.586,656,1.586,657,1.586,658,1.586]],["title/coverage.html",[659,3.291]],["body/coverage.html",[0,0.026,1,1.902,5,0.174,6,2.433,7,2.433,12,0.372,13,0.029,30,0.012,31,0.017,32,0.012,33,2.374,34,1.902,36,2.433,42,1.57,67,2.129,71,1.588,73,2.433,76,1.902,77,2.433,78,3.134,87,1.997,88,1.441,90,1.57,91,2.433,93,1.441,94,2.433,99,1.227,120,1.902,121,2.433,122,1.902,126,1.902,127,2.129,128,3.019,132,1.721,133,2.433,150,1.721,162,2.129,163,2.433,165,1.721,166,2.433,168,1.328,179,1.055,183,1.902,184,1.721,185,2.433,188,1.721,189,2.433,190,3.019,195,1.902,196,2.433,197,1.441,198,1.57,199,2.433,200,1.721,201,2.433,212,2.433,239,1.721,240,2.433,243,1.902,244,2.433,311,1.721,312,1.902,313,1.902,315,1.902,316,2.129,325,1.57,327,1.441,363,2.433,458,5.657,508,2.433,509,2.433,516,1.721,517,2.433,518,2.433,524,2.433,547,1.902,548,2.433,598,2.433,659,2.129,660,2.894,661,2.894,662,2.894,663,4.768,664,2.433,665,4.768,666,5.69,667,2.433,668,6.298,669,2.433,670,2.894,671,2.433,672,4.768,673,2.894,674,4.104,675,2.894,676,2.894,677,2.433,678,2.894,679,2.894,680,2.894]],["title/dependencies.html",[51,2.138,681,2.734]],["body/dependencies.html",[0,0.018,13,0.029,26,1.992,30,0.018,31,0.023,32,0.018,41,1.268,51,2.355,64,2.355,114,2.161,130,2.355,147,4.294,148,3.193,175,3.649,541,3.193,585,3.193,682,6.099,683,4.34,684,5.373,685,4.34,686,4.34,687,4.34,688,4.34,689,4.34,690,4.34,691,4.34,692,4.34,693,4.34,694,4.34,695,4.34,696,4.34,697,4.34,698,4.34,699,4.34,700,4.34,701,4.34]],["title/miscellaneous/functions.html",[702,1.797,703,3.313]],["body/miscellaneous/functions.html",[8,0.474,13,0.025,30,0.022,31,0.025,32,0.022,669,4.309,671,5.268,702,3.369,703,4.309,704,5.126]],["title/index.html",[8,0.253,705,2.734,706,2.734]],["body/index.html",[4,0.232,13,0.028,30,0.016,31,0.021,32,0.016,214,3.239,366,2.834,432,3.239,645,3.239,659,2.834,707,3.852,708,3.852,709,4.983,710,3.852,711,3.852,712,3.852,713,3.852,714,3.852,715,3.852,716,5.523,717,3.852,718,3.852,719,6.304,720,3.852,721,3.852,722,3.852,723,6.195,724,3.852,725,3.852,726,4.983,727,3.852,728,3.239,729,3.852,730,3.852,731,4.983,732,4.983,733,3.852,734,3.852,735,3.852,736,4.983,737,4.983,738,3.852,739,3.852,740,3.852,741,3.852,742,3.852,743,3.239,744,3.852,745,3.852,746,3.852,747,3.852,748,3.852,749,3.852,750,3.852,751,3.852,752,3.852,753,3.852,754,3.852,755,3.852,756,3.852,757,3.852,758,3.852,759,3.852,760,3.852]],["title/modules.html",[50,2.427]],["body/modules.html",[13,0.025,30,0.021,31,0.025,32,0.021,49,3.266,50,2.696,55,2.955,56,2.696,743,5.202,761,6.188,762,6.188,763,6.188]],["title/overview.html",[764,3.761]],["body/overview.html",[2,1.356,13,0.028,30,0.017,31,0.022,32,0.017,35,1.995,42,3.053,49,4.233,50,2.174,51,2.772,52,3.368,53,3.368,54,3.368,55,3.783,56,3.579,57,3.359,58,2.633,59,2.633,72,1.838,89,2.174,132,3.346,165,3.346,168,2.919,325,3.053,356,3.368,357,3.368,579,3.368,580,3.368,581,3.368,764,3.368,765,5.11,766,4.006,767,4.006,768,4.006]],["title/miscellaneous/variables.html",[702,1.797,769,3.313]],["body/miscellaneous/variables.html",[8,0.328,12,0.682,13,0.029,27,0.214,30,0.015,31,0.02,32,0.015,46,1.855,67,3.473,92,1.505,117,3.155,144,2.983,150,2.807,157,2.561,172,2.561,178,3.103,179,1.721,315,3.487,316,2.61,594,2.61,664,2.983,667,2.983,677,3.969,702,2.332,728,3.969,769,2.983,770,3.548,771,3.548,772,3.548,773,5.306,774,4.721,775,4.721,776,3.548,777,3.548,778,3.548,779,3.548,780,3.548,781,3.548,782,3.548,783,3.548,784,3.548,785,3.548,786,3.548,787,3.548,788,3.548,789,3.548,790,3.548,791,3.548,792,3.548,793,3.548,794,3.548,795,3.548,796,3.548,797,3.548,798,3.548,799,3.548,800,3.548,801,3.548,802,3.548,803,3.548,804,3.548,805,3.548,806,3.548,807,3.548,808,3.548,809,4.721,810,3.548,811,3.548,812,3.548,813,3.548]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":458,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["0.2.34",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":678,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["1062",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["11",{"_index":767,"title":{},"body":{"overview.html":{}}}],["12345657543@3i4#234iadsj3.adsf",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1y",{"_index":597,"title":{},"body":{"modules/UsersModule.html":{}}}],["3",{"_index":765,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":768,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["54321",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["59",{"_index":484,"title":{},"body":{"injectables/TasksService.html":{}}}],["59).valueof",{"_index":485,"title":{},"body":{"injectables/TasksService.html":{}}}],["7",{"_index":766,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["8.6.0",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["999",{"_index":495,"title":{},"body":{"injectables/TasksService.html":{}}}],["__dirname",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access_token",{"_index":186,"title":{},"body":{"interfaces/LoginResponse.html":{},"injectables/UsersService.html":{}}}],["adddescriptiondto",{"_index":1,"title":{"classes/AddDescriptionDTO.html":{}},"body":{"classes/AddDescriptionDTO.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["adddescriptiondto.content",{"_index":345,"title":{},"body":{"controllers/TasksController.html":{}}}],["adddescriptiondto.id",{"_index":344,"title":{},"body":{"controllers/TasksController.html":{}}}],["adddescriptiontotask",{"_index":247,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["adddescriptiontotask(adddescriptiondto",{"_index":261,"title":{},"body":{"controllers/TasksController.html":{}}}],["adddescriptiontotask(currentuser",{"_index":371,"title":{},"body":{"injectables/TasksService.html":{}}}],["addselect('user.password",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["addtimetotask",{"_index":248,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["addtimetotask(currentuser",{"_index":373,"title":{},"body":{"injectables/TasksService.html":{}}}],["addtimetotask(id",{"_index":264,"title":{},"body":{"controllers/TasksController.html":{}}}],["admin",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminsecret",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aldeon",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alias",{"_index":433,"title":{},"body":{"injectables/TasksService.html":{}}}],["amazing",{"_index":744,"title":{},"body":{"index.html":{}}}],["andwhere('task.isticking",{"_index":442,"title":{},"body":{"injectables/TasksService.html":{}}}],["andwhere('task.parentid",{"_index":425,"title":{},"body":{"injectables/TasksService.html":{}}}],["app",{"_index":721,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":34,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":715,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":49,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":42,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":134,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["audience",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth.guard",{"_index":318,"title":{},"body":{"controllers/TasksController.html":{}}}],["auth.guard.ts",{"_index":128,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["authguard",{"_index":129,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":131,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":164,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["author",{"_index":753,"title":{},"body":{"index.html":{}}}],["await",{"_index":180,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":745,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":96,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["bcrypt",{"_index":541,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":546,"title":{},"body":{"classes/User.html":{}}}],["bcrypt.gensalt(10",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(password",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["between",{"_index":398,"title":{},"body":{"injectables/TasksService.html":{}}}],["body",{"_index":303,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["body('id",{"_index":337,"title":{},"body":{"controllers/TasksController.html":{}}}],["boolean",{"_index":106,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":671,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":763,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":761,"title":{},"body":{"modules.html":{}}}],["building",{"_index":710,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":220,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["catch",{"_index":417,"title":{},"body":{"injectables/TasksService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["charset",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":249,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["check(currentuser",{"_index":267,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["checkin",{"_index":475,"title":{},"body":{"injectables/TasksService.html":{}}}],["checkin.date",{"_index":477,"title":{},"body":{"injectables/TasksService.html":{}}}],["checkout",{"_index":481,"title":{},"body":{"injectables/TasksService.html":{}}}],["checkout.date",{"_index":482,"title":{},"body":{"injectables/TasksService.html":{}}}],["class",{"_index":0,"title":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{}},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":356,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":358,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":357,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":579,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":580,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":581,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":111,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["column('text",{"_index":223,"title":{},"body":{"classes/Task.html":{}}}],["column('varchar",{"_index":510,"title":{},"body":{"classes/Timesheet.html":{}}}],["column({default",{"_index":100,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["column({nullable",{"_index":528,"title":{},"body":{"classes/User.html":{}}}],["column({select",{"_index":533,"title":{},"body":{"classes/User.html":{}}}],["column({type",{"_index":230,"title":{},"body":{"classes/Task.html":{}}}],["config/typeorm.config",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.error(error",{"_index":419,"title":{},"body":{"injectables/TasksService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["console.log(error",{"_index":450,"title":{},"body":{"injectables/TasksService.html":{}}}],["console.log(req",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.table(tasks",{"_index":455,"title":{},"body":{"injectables/TasksService.html":{}}}],["const",{"_index":178,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":136,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["constructor(tasksrepositiory",{"_index":365,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(userrepository",{"_index":603,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":167,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["content",{"_index":10,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"injectables/TasksService.html":{}}}],["controller",{"_index":33,"title":{"controllers/AppController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('tasks",{"_index":330,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":659,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createddatetime",{"_index":213,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["createparamdecorator",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder('task",{"_index":421,"title":{},"body":{"injectables/TasksService.html":{}}}],["createquerybuilder('user",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["createtask",{"_index":250,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtask(createtaskdto",{"_index":270,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtask(currentuser",{"_index":376,"title":{},"body":{"injectables/TasksService.html":{}}}],["createtaskdto",{"_index":76,"title":{"classes/CreateTaskDTO.html":{}},"body":{"classes/CreateTaskDTO.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["createtaskdto.id",{"_index":334,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtaskdto.parentid",{"_index":333,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtaskdto.title",{"_index":332,"title":{},"body":{"controllers/TasksController.html":{}}}],["ctx",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current_timestamp",{"_index":118,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["currentuser",{"_index":88,"title":{"interfaces/CurrentUser.html":{}},"body":{"interfaces/CurrentUser.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["data",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":97,"title":{},"body":{"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["date(date.date.valueof()).sethours(0",{"_index":464,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(date.sethours(0",{"_index":503,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(date.sethours(23",{"_index":504,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(nextdate.date.valueof",{"_index":473,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(previousdate.date.valueof",{"_index":470,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(startoftheday.valueof",{"_index":478,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(startoftheday.valueof()).sethours(23",{"_index":483,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(task.useddate).valueof",{"_index":507,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(thedate.sethours(0",{"_index":493,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(thedate.sethours(23",{"_index":494,"title":{},"body":{"injectables/TasksService.html":{}}}],["date.date.sethours(0",{"_index":480,"title":{},"body":{"injectables/TasksService.html":{}}}],["date.entity",{"_index":235,"title":{},"body":{"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["date.id",{"_index":506,"title":{},"body":{"injectables/TasksService.html":{}}}],["date.isbeginning",{"_index":448,"title":{},"body":{"injectables/TasksService.html":{}}}],["date.save",{"_index":449,"title":{},"body":{"injectables/TasksService.html":{}}}],["date.task",{"_index":238,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{}}}],["date.task.user",{"_index":476,"title":{},"body":{"injectables/TasksService.html":{}}}],["date.task.user.username",{"_index":465,"title":{},"body":{"injectables/TasksService.html":{}}}],["dateentity",{"_index":93,"title":{"classes/DateEntity.html":{}},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["dateid",{"_index":378,"title":{},"body":{"injectables/TasksService.html":{}}}],["daterepository",{"_index":367,"title":{},"body":{"injectables/TasksService.html":{}}}],["dates",{"_index":501,"title":{},"body":{"injectables/TasksService.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"classes/CreateTaskDTO.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":117,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":592,"title":{},"body":{"modules/UsersModule.html":{}}}],["defined",{"_index":17,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":304,"title":{},"body":{"controllers/TasksController.html":{},"injectables/UsersService.html":{}}}],["delete('/deletedate",{"_index":274,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete('/deletetask",{"_index":277,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete('/removetaskfromtoday",{"_index":298,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletedate",{"_index":251,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletedate(currentuser",{"_index":273,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetask",{"_index":252,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetask(currentuser",{"_index":380,"title":{},"body":{"injectables/TasksService.html":{}}}],["deletetask(id",{"_index":276,"title":{},"body":{"controllers/TasksController.html":{}}}],["dependencies",{"_index":51,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":437,"title":{},"body":{"injectables/TasksService.html":{}}}],["description",{"_index":214,"title":{},"body":{"classes/Task.html":{},"index.html":{}}}],["description.dto",{"_index":320,"title":{},"body":{"controllers/TasksController.html":{}}}],["description.dto.ts",{"_index":7,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"coverage.html":{}}}],["description.dto.ts:10",{"_index":21,"title":{},"body":{"classes/AddDescriptionDTO.html":{}}}],["description.dto.ts:7",{"_index":18,"title":{},"body":{"classes/AddDescriptionDTO.html":{}}}],["development",{"_index":722,"title":{},"body":{"index.html":{}}}],["disable",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["documentation",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["downlimit",{"_index":466,"title":{},"body":{"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{}}}],["dto/add",{"_index":319,"title":{},"body":{"controllers/TasksController.html":{}}}],["dto/create",{"_index":321,"title":{},"body":{"controllers/TasksController.html":{}}}],["dto/edit",{"_index":323,"title":{},"body":{"controllers/TasksController.html":{}}}],["dto/login",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/rename",{"_index":324,"title":{},"body":{"controllers/TasksController.html":{}}}],["dto/signup",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":733,"title":{},"body":{"index.html":{}}}],["eager",{"_index":221,"title":{},"body":{"classes/Task.html":{}}}],["edit",{"_index":313,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"coverage.html":{}}}],["edittimeoftask",{"_index":253,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["edittimeoftask(currentuser",{"_index":279,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["edittimeoftaskdto",{"_index":120,"title":{"classes/EditTimeOfTaskDTO.html":{}},"body":{"classes/EditTimeOfTaskDTO.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["edittimeoftaskdto.id",{"_index":349,"title":{},"body":{"controllers/TasksController.html":{}}}],["edittimeoftaskdto.time",{"_index":350,"title":{},"body":{"controllers/TasksController.html":{}}}],["efficient",{"_index":711,"title":{},"body":{"index.html":{}}}],["el",{"_index":498,"title":{},"body":{"injectables/TasksService.html":{}}}],["el.id",{"_index":499,"title":{},"body":{"injectables/TasksService.html":{}}}],["email",{"_index":519,"title":{},"body":{"classes/UpdateProfileDTO.html":{},"classes/User.html":{}}}],["entities",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":112,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["entity('date",{"_index":116,"title":{},"body":{"classes/DateEntity.html":{}}}],["entity.{ts,js",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":418,"title":{},"body":{"injectables/TasksService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["error.errno",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["eslint",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["eslint/no",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["executioncontext",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":596,"title":{},"body":{"modules/UsersModule.html":{}}}],["export",{"_index":27,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["exports",{"_index":583,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":95,"title":{},"body":{"classes/DateEntity.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["extra",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":145,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":155,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":157,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":599,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":600,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(username",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":709,"title":{},"body":{"index.html":{}}}],["function",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":703,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/check",{"_index":268,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('/gettasksnames",{"_index":286,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('/gettodaytasks",{"_index":292,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('profile/getprofile",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["getdatesofaday",{"_index":254,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["getdatesofaday(currentuser",{"_index":282,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gethello",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmany",{"_index":427,"title":{},"body":{"injectables/TasksService.html":{}}}],["getone",{"_index":444,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["getprofile",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getprofile(@getuser",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(currentuser",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getrepository",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["getrepository(user",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["gettasksnames",{"_index":255,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasksnames(@getuser",{"_index":335,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettasksnames(currentuser",{"_index":285,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasksofaday",{"_index":364,"title":{},"body":{"injectables/TasksService.html":{}}}],["gettasksofaday(currentuser",{"_index":385,"title":{},"body":{"injectables/TasksService.html":{}}}],["gettimeeditlimitation",{"_index":256,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettimeeditlimitation(currentuser",{"_index":288,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["getting",{"_index":705,"title":{"index.html":{}},"body":{}}],["gettodaytasks",{"_index":257,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettodaytasks(currentuser",{"_index":291,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettsaksofaday",{"_index":258,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettsaksofaday(currentuser",{"_index":294,"title":{},"body":{"controllers/TasksController.html":{}}}],["getuser",{"_index":315,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":740,"title":{},"body":{"index.html":{}}}],["hash",{"_index":545,"title":{},"body":{"classes/User.html":{}}}],["hashedpassword",{"_index":539,"title":{},"body":{"classes/User.html":{}}}],["here",{"_index":750,"title":{},"body":{"index.html":{}}}],["host",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":757,"title":{},"body":{"index.html":{}}}],["id",{"_index":11,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtStrategy.html":{},"classes/RenameTaskDTO.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/Timesheet.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":156,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":22,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":71,"title":{"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":396,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(dateentity",{"_index":403,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(task",{"_index":401,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(timesheet",{"_index":404,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(user",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["innerjoin",{"_index":434,"title":{},"body":{"injectables/TasksService.html":{}}}],["innerjoin('task.date",{"_index":439,"title":{},"body":{"injectables/TasksService.html":{}}}],["innerjoin('task.user",{"_index":423,"title":{},"body":{"injectables/TasksService.html":{}}}],["installation",{"_index":718,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":720,"title":{},"body":{"index.html":{}}}],["interface",{"_index":87,"title":{"interfaces/CurrentUser.html":{},"interfaces/LoginResponse.html":{},"interfaces/ResponseMessage.html":{},"interfaces/TaskWithSubTasks.html":{},"interfaces/TimeEditLimitation.html":{}},"body":{"interfaces/CurrentUser.html":{},"interfaces/LoginResponse.html":{},"interfaces/ResponseMessage.html":{},"interfaces/TaskWithSubTasks.html":{},"interfaces/TimeEditLimitation.html":{},"coverage.html":{}}}],["interfaces",{"_index":89,"title":{},"body":{"interfaces/CurrentUser.html":{},"interfaces/LoginResponse.html":{},"interfaces/ResponseMessage.html":{},"interfaces/TaskWithSubTasks.html":{},"interfaces/TimeEditLimitation.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["isactive",{"_index":525,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["isbeginning",{"_index":98,"title":{},"body":{"classes/DateEntity.html":{}}}],["ischeckin",{"_index":453,"title":{},"body":{"injectables/TasksService.html":{},"classes/Timesheet.html":{}}}],["isdate",{"_index":124,"title":{},"body":{"classes/EditTimeOfTaskDTO.html":{}}}],["isemail",{"_index":520,"title":{},"body":{"classes/UpdateProfileDTO.html":{}}}],["isnotempty",{"_index":210,"title":{},"body":{"classes/SignupUserDTO.html":{},"classes/UpdateProfileDTO.html":{}}}],["isnotempty({message",{"_index":202,"title":{},"body":{"classes/SignupUserDTO.html":{},"classes/UpdateProfileDTO.html":{}}}],["isnumber",{"_index":20,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/EditTimeOfTaskDTO.html":{},"classes/RenameTaskDTO.html":{}}}],["isstring",{"_index":23,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{},"classes/UpdateProfileDTO.html":{}}}],["isstring()@minlength(4)@maxlength(20",{"_index":83,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{}}}],["isstring()@minlength(5)@maxlength(140",{"_index":16,"title":{},"body":{"classes/AddDescriptionDTO.html":{}}}],["isstring()@minlength(8)@maxlength(20",{"_index":191,"title":{},"body":{"classes/LoginUserDTO.html":{}}}],["isstring({message",{"_index":203,"title":{},"body":{"classes/SignupUserDTO.html":{},"classes/UpdateProfileDTO.html":{}}}],["isticking",{"_index":215,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{}}}],["isusersignedup",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":432,"title":{},"body":{"injectables/TasksService.html":{},"index.html":{}}}],["jwt",{"_index":148,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":587,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtauthguard",{"_index":126,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":150,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":159,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["jwtfromrequest",{"_index":154,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":584,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtmodule.register",{"_index":593,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtservice",{"_index":604,"title":{},"body":{"injectables/UsersService.html":{}}}],["jwtstrategy",{"_index":132,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":754,"title":{},"body":{"index.html":{}}}],["lastcheck",{"_index":430,"title":{},"body":{"injectables/TasksService.html":{}}}],["lastcheck.date.sethours(0",{"_index":457,"title":{},"body":{"injectables/TasksService.html":{}}}],["lastcheck.ischeckin",{"_index":446,"title":{},"body":{"injectables/TasksService.html":{}}}],["lastdate",{"_index":460,"title":{},"body":{"injectables/TasksService.html":{}}}],["lastdate.isbeginning",{"_index":462,"title":{},"body":{"injectables/TasksService.html":{}}}],["leftjoinandselect",{"_index":492,"title":{},"body":{"injectables/TasksService.html":{}}}],["lessthan",{"_index":399,"title":{},"body":{"injectables/TasksService.html":{}}}],["lessthan(date.date",{"_index":469,"title":{},"body":{"injectables/TasksService.html":{}}}],["license",{"_index":760,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":737,"title":{},"body":{"index.html":{}}}],["limitation.interface",{"_index":314,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["limitation.interface.ts",{"_index":508,"title":{},"body":{"interfaces/TimeEditLimitation.html":{},"coverage.html":{}}}],["limitations",{"_index":486,"title":{},"body":{"injectables/TasksService.html":{}}}],["limitations.downlimit",{"_index":488,"title":{},"body":{"injectables/TasksService.html":{}}}],["limitations.uplimit",{"_index":489,"title":{},"body":{"injectables/TasksService.html":{}}}],["line",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["local",{"_index":175,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":588,"title":{},"body":{"modules/UsersModule.html":{}}}],["localauthguard",{"_index":162,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localhost",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":165,"title":{"injectables/LocalStrategy.html":{}},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(@body",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(loginuserdto",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(payload",{"_index":611,"title":{},"body":{"injectables/UsersService.html":{}}}],["loginresponse",{"_index":184,"title":{"interfaces/LoginResponse.html":{}},"body":{"interfaces/LoginResponse.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["loginuserdto",{"_index":188,"title":{"classes/LoginUserDTO.html":{}},"body":{"classes/LoginUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["manytoone",{"_index":113,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{}}}],["manytoone(undefined",{"_index":109,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{}}}],["matches",{"_index":211,"title":{},"body":{"classes/SignupUserDTO.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":204,"title":{},"body":{"classes/SignupUserDTO.html":{}}}],["matching",{"_index":31,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":25,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{},"classes/UpdateProfileDTO.html":{}}}],["maxlength(12",{"_index":208,"title":{},"body":{"classes/SignupUserDTO.html":{}}}],["maxlength(140",{"_index":29,"title":{},"body":{"classes/AddDescriptionDTO.html":{}}}],["maxlength(20",{"_index":86,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{}}}],["maxlength(28",{"_index":522,"title":{},"body":{"classes/UpdateProfileDTO.html":{}}}],["message",{"_index":187,"title":{},"body":{"interfaces/LoginResponse.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDTO.html":{},"injectables/UsersService.html":{}}}],["message.interface",{"_index":309,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["message.interface.ts",{"_index":199,"title":{},"body":{"interfaces/ResponseMessage.html":{},"coverage.html":{}}}],["metadata",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":24,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{},"classes/UpdateProfileDTO.html":{}}}],["minlength(4",{"_index":85,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/UpdateProfileDTO.html":{}}}],["minlength(5",{"_index":28,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/SignupUserDTO.html":{}}}],["minlength(8",{"_index":194,"title":{},"body":{"classes/LoginUserDTO.html":{},"classes/SignupUserDTO.html":{}}}],["miscellaneous",{"_index":702,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":736,"title":{},"body":{"index.html":{}}}],["mode",{"_index":726,"title":{},"body":{"index.html":{}}}],["module",{"_index":48,"title":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":50,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":749,"title":{},"body":{"index.html":{}}}],["morethan",{"_index":400,"title":{},"body":{"injectables/TasksService.html":{}}}],["morethan(date.date",{"_index":472,"title":{},"body":{"injectables/TasksService.html":{}}}],["myśliwiec",{"_index":755,"title":{},"body":{"index.html":{}}}],["name",{"_index":141,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":716,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":759,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":585,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":130,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":183,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["next",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["nextdate",{"_index":471,"title":{},"body":{"injectables/TasksService.html":{}}}],["nextdate.date.sethours(0",{"_index":479,"title":{},"body":{"injectables/TasksService.html":{}}}],["node.js",{"_index":708,"title":{},"body":{"index.html":{}}}],["notacceptableexception",{"_index":394,"title":{},"body":{"injectables/TasksService.html":{}}}],["notfoundexception",{"_index":395,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["npm",{"_index":719,"title":{},"body":{"index.html":{}}}],["null",{"_index":426,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":224,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["number",{"_index":19,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["object",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onetomany",{"_index":234,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":219,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["open",{"_index":738,"title":{},"body":{"index.html":{}}}],["optional",{"_index":142,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["order",{"_index":436,"title":{},"body":{"injectables/TasksService.html":{}}}],["orderby('date.date",{"_index":443,"title":{},"body":{"injectables/TasksService.html":{}}}],["out",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":764,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":681,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":140,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parent",{"_index":216,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{}}}],["parentid",{"_index":79,"title":{},"body":{"classes/CreateTaskDTO.html":{},"injectables/TasksService.html":{}}}],["parseint(process.env.db_port",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pass",{"_index":618,"title":{},"body":{"injectables/UsersService.html":{}}}],["passport",{"_index":147,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":586,"title":{},"body":{"modules/UsersModule.html":{}}}],["passportmodule.register",{"_index":591,"title":{},"body":{"modules/UsersModule.html":{}}}],["passportstrategy",{"_index":149,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":152,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":172,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/SignupUserDTO.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":305,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch('/adddescriptiontotask",{"_index":262,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch('/renametask",{"_index":301,"title":{},"body":{"controllers/TasksController.html":{}}}],["payload",{"_index":143,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["payload.sub",{"_index":160,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":161,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["pg",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["phase",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":747,"title":{},"body":{"index.html":{}}}],["port",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":306,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["post('/addtimetotask",{"_index":265,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('/createtask",{"_index":271,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('/edittimeoftask",{"_index":280,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('/getdatesofaday",{"_index":283,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('/gettasksofaday",{"_index":295,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('/gettimeeditlimitation",{"_index":289,"title":{},"body":{"controllers/TasksController.html":{}}}],["post('auth/login",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('auth/signup",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('profile/updateprofile",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgres",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":245,"title":{},"body":{"controllers/TasksController.html":{}}}],["previousdate",{"_index":468,"title":{},"body":{"injectables/TasksService.html":{}}}],["previousdate.date.sethours(0",{"_index":474,"title":{},"body":{"injectables/TasksService.html":{}}}],["primarygeneratedcolumn",{"_index":104,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["private",{"_index":402,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["process.env.db_host",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":728,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["profile.dto",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["profile.dto.ts",{"_index":518,"title":{},"body":{"classes/UpdateProfileDTO.html":{},"coverage.html":{}}}],["profile.dto.ts:18",{"_index":523,"title":{},"body":{"classes/UpdateProfileDTO.html":{}}}],["profile.dto.ts:22",{"_index":521,"title":{},"body":{"classes/UpdateProfileDTO.html":{}}}],["progressive",{"_index":707,"title":{},"body":{"index.html":{}}}],["project",{"_index":739,"title":{},"body":{"index.html":{}}}],["promise",{"_index":174,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":496,"title":{},"body":{"injectables/TasksService.html":{}}}],["properties",{"_index":9,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{}}}],["providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["read",{"_index":748,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["reflect",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["rejectunauthorized",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations",{"_index":407,"title":{},"body":{"injectables/TasksService.html":{}}}],["remove",{"_index":601,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(id",{"_index":613,"title":{},"body":{"injectables/UsersService.html":{}}}],["removetaskfromtoday",{"_index":259,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["removetaskfromtoday(currentuser",{"_index":297,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["renametask",{"_index":260,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["renametask(currentuser",{"_index":392,"title":{},"body":{"injectables/TasksService.html":{}}}],["renametask(renametaskdto",{"_index":300,"title":{},"body":{"controllers/TasksController.html":{}}}],["renametaskdto",{"_index":195,"title":{"classes/RenameTaskDTO.html":{}},"body":{"classes/RenameTaskDTO.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["renametaskdto.id",{"_index":340,"title":{},"body":{"controllers/TasksController.html":{}}}],["renametaskdto.title",{"_index":341,"title":{},"body":{"controllers/TasksController.html":{}}}],["repository",{"_index":366,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responsemessage",{"_index":197,"title":{"interfaces/ResponseMessage.html":{}},"body":{"interfaces/ResponseMessage.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["result",{"_index":30,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":32,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":723,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":712,"title":{},"body":{"index.html":{}}}],["secret",{"_index":594,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":158,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":438,"title":{},"body":{"injectables/TasksService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["select(['task.id",{"_index":422,"title":{},"body":{"injectables/TasksService.html":{}}}],["server",{"_index":713,"title":{},"body":{"index.html":{}}}],["side",{"_index":714,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":595,"title":{},"body":{"modules/UsersModule.html":{}}}],["signup",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["signup(@body",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["signup(signupuserdto",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["signupuserdto",{"_index":200,"title":{"classes/SignupUserDTO.html":{}},"body":{"classes/SignupUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":742,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":704,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":73,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":74,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config/constants",{"_index":151,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/config/constants.ts",{"_index":664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/typeorm.config.ts",{"_index":667,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/interfaces/current",{"_index":90,"title":{},"body":{"interfaces/CurrentUser.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/interfaces/login.interface",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/interfaces/login.interface.ts",{"_index":185,"title":{},"body":{"interfaces/LoginResponse.html":{},"coverage.html":{}}}],["src/interfaces/response",{"_index":198,"title":{},"body":{"interfaces/ResponseMessage.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/interfaces/task.interface",{"_index":310,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["src/interfaces/task.interface.ts",{"_index":240,"title":{},"body":{"interfaces/TaskWithSubTasks.html":{},"coverage.html":{}}}],["src/interfaces/time",{"_index":312,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":669,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tasks/date.entity.ts",{"_index":94,"title":{},"body":{"classes/DateEntity.html":{},"coverage.html":{}}}],["src/tasks/date.entity.ts:13",{"_index":105,"title":{},"body":{"classes/DateEntity.html":{}}}],["src/tasks/date.entity.ts:18",{"_index":103,"title":{},"body":{"classes/DateEntity.html":{}}}],["src/tasks/date.entity.ts:20",{"_index":108,"title":{},"body":{"classes/DateEntity.html":{}}}],["src/tasks/date.entity.ts:22",{"_index":110,"title":{},"body":{"classes/DateEntity.html":{}}}],["src/tasks/dto/add",{"_index":6,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"coverage.html":{}}}],["src/tasks/dto/create",{"_index":77,"title":{},"body":{"classes/CreateTaskDTO.html":{},"coverage.html":{}}}],["src/tasks/dto/edit",{"_index":121,"title":{},"body":{"classes/EditTimeOfTaskDTO.html":{},"coverage.html":{}}}],["src/tasks/dto/rename",{"_index":196,"title":{},"body":{"classes/RenameTaskDTO.html":{},"coverage.html":{}}}],["src/tasks/task.entity",{"_index":242,"title":{},"body":{"interfaces/TaskWithSubTasks.html":{},"classes/User.html":{}}}],["src/tasks/task.entity.ts",{"_index":212,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/tasks/task.entity.ts:15",{"_index":226,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:17",{"_index":229,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:19",{"_index":227,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:21",{"_index":228,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:23",{"_index":232,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:28",{"_index":218,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:33",{"_index":222,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:35",{"_index":225,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:39",{"_index":231,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":244,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:103",{"_index":281,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:115",{"_index":293,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:122",{"_index":296,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:130",{"_index":284,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:138",{"_index":275,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:146",{"_index":299,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:31",{"_index":272,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:44",{"_index":287,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:49",{"_index":266,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:57",{"_index":302,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:69",{"_index":278,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:77",{"_index":263,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:89",{"_index":269,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:96",{"_index":290,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":359,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":363,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:104",{"_index":381,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:124",{"_index":372,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:147",{"_index":375,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:19",{"_index":369,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:202",{"_index":374,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:265",{"_index":388,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:30",{"_index":377,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:329",{"_index":382,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:354",{"_index":389,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:358",{"_index":387,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:418",{"_index":383,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:439",{"_index":379,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:460",{"_index":391,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:68",{"_index":384,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:79",{"_index":393,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/timesheet.entity",{"_index":542,"title":{},"body":{"classes/User.html":{}}}],["src/tasks/timesheet.entity.ts",{"_index":509,"title":{},"body":{"classes/Timesheet.html":{},"coverage.html":{}}}],["src/tasks/timesheet.entity.ts:13",{"_index":512,"title":{},"body":{"classes/Timesheet.html":{}}}],["src/tasks/timesheet.entity.ts:17",{"_index":511,"title":{},"body":{"classes/Timesheet.html":{}}}],["src/tasks/timesheet.entity.ts:19",{"_index":513,"title":{},"body":{"classes/Timesheet.html":{}}}],["src/tasks/timesheet.entity.ts:21",{"_index":514,"title":{},"body":{"classes/Timesheet.html":{}}}],["src/users/dto/login",{"_index":189,"title":{},"body":{"classes/LoginUserDTO.html":{},"coverage.html":{}}}],["src/users/dto/signup",{"_index":201,"title":{},"body":{"classes/SignupUserDTO.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":517,"title":{},"body":{"classes/UpdateProfileDTO.html":{},"coverage.html":{}}}],["src/users/get",{"_index":316,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/jwt",{"_index":127,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["src/users/jwt.strategy.ts",{"_index":133,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/users/jwt.strategy.ts:16",{"_index":139,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/jwt.strategy.ts:7",{"_index":137,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/local",{"_index":163,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/users/local.strategy.ts",{"_index":166,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/users/local.strategy.ts:12",{"_index":173,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/users/local.strategy.ts:7",{"_index":169,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/users/user.entity",{"_index":233,"title":{},"body":{"classes/Task.html":{},"classes/Timesheet.html":{}}}],["src/users/user.entity.ts",{"_index":524,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:17",{"_index":530,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:19",{"_index":532,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":537,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":534,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:25",{"_index":529,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:27",{"_index":531,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":527,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:31",{"_index":535,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:33",{"_index":536,"title":{},"body":{"classes/User.html":{}}}],["src/users/user.entity.ts:35",{"_index":540,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:17",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:22",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:27",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:35",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":360,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/users/users.module.ts",{"_index":582,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":397,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/users/users.service.ts",{"_index":598,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:109",{"_index":616,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:127",{"_index":610,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:29",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":609,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":615,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:71",{"_index":614,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:75",{"_index":619,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:85",{"_index":612,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":724,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":727,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":729,"title":{},"body":{"index.html":{}}}],["started",{"_index":706,"title":{"index.html":{}},"body":{}}],["starter",{"_index":717,"title":{},"body":{"index.html":{}}}],["startoftheday",{"_index":463,"title":{},"body":{"injectables/TasksService.html":{}}}],["statements",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":751,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":146,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":14,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["sub",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["subtasks",{"_index":241,"title":{},"body":{"interfaces/TaskWithSubTasks.html":{},"injectables/TasksService.html":{}}}],["super",{"_index":153,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":743,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":762,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":99,"title":{"classes/Task.html":{}},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"coverage.html":{}}}],["task.date",{"_index":119,"title":{},"body":{"classes/DateEntity.html":{},"injectables/TasksService.html":{}}}],["task.description",{"_index":429,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.dto",{"_index":322,"title":{},"body":{"controllers/TasksController.html":{}}}],["task.dto.ts",{"_index":78,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/EditTimeOfTaskDTO.html":{},"classes/RenameTaskDTO.html":{},"coverage.html":{}}}],["task.dto.ts:10",{"_index":82,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/RenameTaskDTO.html":{}}}],["task.dto.ts:13",{"_index":81,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["task.dto.ts:5",{"_index":125,"title":{},"body":{"classes/EditTimeOfTaskDTO.html":{}}}],["task.dto.ts:7",{"_index":84,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/RenameTaskDTO.html":{}}}],["task.dto.ts:8",{"_index":123,"title":{},"body":{"classes/EditTimeOfTaskDTO.html":{}}}],["task.entity",{"_index":115,"title":{},"body":{"classes/DateEntity.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["task.id",{"_index":236,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{}}}],["task.isticking",{"_index":447,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.parent",{"_index":411,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.parent.useddate",{"_index":412,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.save",{"_index":416,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.title",{"_index":410,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.useddate",{"_index":414,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.user",{"_index":413,"title":{},"body":{"injectables/TasksService.html":{},"classes/User.html":{}}}],["task.user.username",{"_index":408,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskid",{"_index":390,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks",{"_index":246,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["tasks.controller",{"_index":361,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.map(async",{"_index":497,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks.service",{"_index":326,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["taskscontroller",{"_index":243,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":55,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksrepositiory",{"_index":370,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasksservice",{"_index":325,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["tasktracker",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["taskwithsubtasks",{"_index":239,"title":{"interfaces/TaskWithSubTasks.html":{}},"body":{"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["test",{"_index":732,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":735,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":734,"title":{},"body":{"index.html":{}}}],["tests",{"_index":731,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":741,"title":{},"body":{"index.html":{}}}],["thedate",{"_index":386,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.appservice.gethello",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["this.daterepository.delete",{"_index":505,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.daterepository.find",{"_index":502,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.daterepository.findone",{"_index":461,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.findone(currentuser.username",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findone(username",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettasksofaday(currentuser",{"_index":490,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.gettimeeditlimitation(currentuser",{"_index":487,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.jwtservice.sign(info",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.tasksrepositiory",{"_index":420,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksrepositiory.delete",{"_index":428,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksrepositiory.find",{"_index":454,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksrepositiory.findone",{"_index":406,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.adddescriptiontotask",{"_index":343,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.addtimetotask(currentuser",{"_index":338,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.check(currentuser",{"_index":346,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.createtask",{"_index":331,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.deletedate(currentuser",{"_index":354,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.deletetask(currentuser",{"_index":342,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.edittimeoftask",{"_index":348,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.getdatesofaday(currentuser",{"_index":353,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettasksnames(currentuser",{"_index":336,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettasksofaday(currentuser",{"_index":352,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettimeeditlimitation(currentuser",{"_index":347,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettodaytasks(currentuser",{"_index":351,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.removetaskfromtoday(currentuser",{"_index":355,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.renametask",{"_index":339,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.timesheetrepository.findone",{"_index":431,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.userrepository.find",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update(id",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.findone(currentuser.username",{"_index":405,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.userservice.validateuser(username",{"_index":181,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.usersservice.getprofile(currentuser",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.login(loginuserdto",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.signup(signupuserdto",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateprofile(currentuser",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":182,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":122,"title":{},"body":{"classes/EditTimeOfTaskDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["time.ischeckin",{"_index":445,"title":{},"body":{"injectables/TasksService.html":{}}}],["time.save",{"_index":452,"title":{},"body":{"injectables/TasksService.html":{}}}],["time.user",{"_index":451,"title":{},"body":{"injectables/TasksService.html":{}}}],["timeeditlimitation",{"_index":311,"title":{"interfaces/TimeEditLimitation.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"coverage.html":{}}}],["timesheet",{"_index":327,"title":{"classes/Timesheet.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/Timesheet.html":{},"classes/User.html":{},"coverage.html":{}}}],["timesheet.entity",{"_index":328,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["timesheet.user",{"_index":435,"title":{},"body":{"injectables/TasksService.html":{},"classes/User.html":{}}}],["timesheetrepository",{"_index":368,"title":{},"body":{"injectables/TasksService.html":{}}}],["title",{"_index":80,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/Task.html":{},"injectables/TasksService.html":{}}}],["today",{"_index":456,"title":{},"body":{"injectables/TasksService.html":{}}}],["today.sethours(0",{"_index":459,"title":{},"body":{"injectables/TasksService.html":{}}}],["todaytasks",{"_index":491,"title":{},"body":{"injectables/TasksService.html":{}}}],["todaytasks.push",{"_index":500,"title":{},"body":{"injectables/TasksService.html":{}}}],["todo",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["touch",{"_index":752,"title":{},"body":{"index.html":{}}}],["true",{"_index":107,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["try",{"_index":415,"title":{},"body":{"injectables/TasksService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":758,"title":{},"body":{"index.html":{}}}],["type",{"_index":12,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"interfaces/CurrentUser.html":{},"classes/DateEntity.html":{},"classes/EditTimeOfTaskDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/LoginResponse.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"interfaces/ResponseMessage.html":{},"classes/SignupUserDTO.html":{},"classes/Task.html":{},"interfaces/TaskWithSubTasks.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{},"classes/Timesheet.html":{},"classes/UpdateProfileDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":114,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/Timesheet.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([task",{"_index":362,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":590,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":176,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":101,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/Timesheet.html":{},"classes/User.html":{}}}],["unique",{"_index":543,"title":{},"body":{"classes/User.html":{}}}],["unique(['username",{"_index":544,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":730,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":144,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["unused",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofile",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateprofile(currentuser",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateprofiledto",{"_index":516,"title":{"classes/UpdateProfileDTO.html":{}},"body":{"classes/UpdateProfileDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateprofiledto.email",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofiledto.name",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["uplimit",{"_index":467,"title":{},"body":{"injectables/TasksService.html":{},"interfaces/TimeEditLimitation.html":{}}}],["useddate",{"_index":217,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{}}}],["useguards",{"_index":307,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(jwtauthguard",{"_index":329,"title":{},"body":{"controllers/TasksController.html":{}}}],["user",{"_index":179,"title":{"classes/User.html":{}},"body":{"injectables/LocalStrategy.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/Timesheet.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":317,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":677,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":190,"title":{},"body":{"classes/LoginUserDTO.html":{},"classes/SignupUserDTO.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":192,"title":{},"body":{"classes/LoginUserDTO.html":{}}}],["user.dto.ts:14",{"_index":209,"title":{},"body":{"classes/SignupUserDTO.html":{}}}],["user.dto.ts:24",{"_index":207,"title":{},"body":{"classes/SignupUserDTO.html":{}}}],["user.dto.ts:7",{"_index":193,"title":{},"body":{"classes/LoginUserDTO.html":{}}}],["user.email",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.entity",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":441,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["user.interface",{"_index":308,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.interface.ts",{"_index":91,"title":{},"body":{"interfaces/CurrentUser.html":{},"coverage.html":{}}}],["user.isactive",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.name",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.save",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.task",{"_index":237,"title":{},"body":{"classes/Task.html":{}}}],["user.timesheet",{"_index":515,"title":{},"body":{"classes/Timesheet.html":{}}}],["user.username",{"_index":409,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["user.validatepassword(payload.password",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":92,"title":{},"body":{"interfaces/CurrentUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/SignupUserDTO.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.controller",{"_index":589,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((user",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":177,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":547,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":170,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{}}}],["usersmodule",{"_index":56,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":168,"title":{"injectables/UsersService.html":{}},"body":{"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["utf8mb4_unicode_ci",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":135,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":138,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":171,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validatepassword",{"_index":526,"title":{},"body":{"classes/User.html":{}}}],["validatepassword(password",{"_index":538,"title":{},"body":{"classes/User.html":{}}}],["validateuser",{"_index":602,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser(username",{"_index":617,"title":{},"body":{"injectables/UsersService.html":{}}}],["validator",{"_index":26,"title":{},"body":{"classes/AddDescriptionDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/EditTimeOfTaskDTO.html":{},"classes/LoginUserDTO.html":{},"classes/RenameTaskDTO.html":{},"classes/SignupUserDTO.html":{},"classes/UpdateProfileDTO.html":{},"dependencies.html":{}}}],["value",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":102,"title":{},"body":{"classes/DateEntity.html":{},"classes/Task.html":{},"classes/User.html":{}}}],["variable",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":769,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["watch",{"_index":725,"title":{},"body":{"index.html":{}}}],["we're",{"_index":75,"title":{},"body":{"injectables/AppService.html":{}}}],["website",{"_index":756,"title":{},"body":{"index.html":{}}}],["where('user.id",{"_index":440,"title":{},"body":{"injectables/TasksService.html":{}}}],["where('user.username",{"_index":424,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["you'd",{"_index":746,"title":{},"body":{"index.html":{}}}],["z",{"_index":206,"title":{},"body":{"classes/SignupUserDTO.html":{}}}],["z])(?=.*[a",{"_index":205,"title":{},"body":{"classes/SignupUserDTO.html":{}}}],["zoom",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddDescriptionDTO.html":{"url":"classes/AddDescriptionDTO.html","title":"class - AddDescriptionDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddDescriptionDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/add-description.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(5)@MaxLength(140)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/add-description.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/add-description.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MinLength, MaxLength, IsNumber } from 'class-validator';\n\nexport class AddDescriptionDTO {\n  @IsString()\n  @MinLength(5)\n  @MaxLength(140)\n  content: string;\n\n  @IsNumber()\n  id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nTasksModule\n\nTasksModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { TasksModule } from './tasks/tasks.module';\n\n@Module({\n  imports: [UsersModule, TypeOrmModule.forRoot(typeOrmConfig), TasksModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return \"We're On!\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDTO.html":{"url":"classes/CreateTaskDTO.html","title":"class - CreateTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                parentId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(4)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MinLength, MaxLength, IsNumber } from 'class-validator';\n\nexport class CreateTaskDTO {\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  title: string;\n\n  @IsNumber()\n  parentId: number;\n\n  @IsNumber()\n  id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CurrentUser.html":{"url":"interfaces/CurrentUser.html","title":"interface - CurrentUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CurrentUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/current-user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CurrentUser {\n  id: number;\n  username: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateEntity.html":{"url":"classes/DateEntity.html","title":"class - DateEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/date.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                id\n                            \n                            \n                                isBeginning\n                            \n                            \n                                task\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/date.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/date.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isBeginning\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/date.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        task\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/date.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { Task } from './task.entity';\n\n@Entity('date')\nexport class DateEntity extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({\n    default: () => 'CURRENT_TIMESTAMP',\n    type: 'varchar',\n  })\n  date: Date;\n  @Column({ default: true })\n  isBeginning: boolean;\n  @ManyToOne(() => Task, (task) => task.date)\n  task: Task;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditTimeOfTaskDTO.html":{"url":"classes/EditTimeOfTaskDTO.html","title":"class - EditTimeOfTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditTimeOfTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/edit-time-of-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/edit-time-of-task.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/edit-time-of-task.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsDate } from 'class-validator';\n\nexport class EditTimeOfTaskDTO {\n  @IsDate()\n  time: Date;\n\n  @IsNumber()\n  id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from 'src/config/constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { id: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/users/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from './users.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private userService: UsersService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    const user = await this.userService.validateUser(username, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/login.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            access_token\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        access_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginResponse {\n  message: string;\n  access_token: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDTO.html":{"url":"classes/LoginUserDTO.html","title":"class - LoginUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/login-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(4)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MinLength, MaxLength } from 'class-validator';\n\nexport class LoginUserDTO {\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  username: string;\n\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RenameTaskDTO.html":{"url":"classes/RenameTaskDTO.html","title":"class - RenameTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RenameTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/rename-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/rename-task.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(4)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/rename-task.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MinLength, MaxLength, IsNumber } from 'class-validator';\n\nexport class RenameTaskDTO {\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)\n  title: string;\n\n  @IsNumber()\n  id: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseMessage.html":{"url":"interfaces/ResponseMessage.html","title":"interface - ResponseMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/response-message.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ResponseMessage {\n  message: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupUserDTO.html":{"url":"classes/SignupUserDTO.html","title":"class - SignupUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/signup-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'یک رمز وارد کنید.'})@IsString({message: 'رمز عبور باید به صورت رشته باشد'})@MinLength(8, {message: 'نام کاربری باید بیشتر از ۸ حرف باشد.'})@MaxLength(20, {message: 'نام کابری باید کمتر از ۲۰ حرف باشد'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'رمز عبور بسیار ضعیف است و باید متشکل از یک حرف بزرگ، یک عدد و یک علامت باشد.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/signup-user.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'یک نام کابری وارد کنید'})@IsString({message: 'نام کاربری باید از نوع رشته باشد.'})@MinLength(5, {message: 'نام کاربری باید بیشتر از ۵ حرف باشد'})@MaxLength(12, {message: 'نام کاربری باید کمتر از ۱۲ حرف باشد'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/signup-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class SignupUserDTO {\n  @IsNotEmpty({ message: 'یک نام کابری وارد کنید' })\n  @IsString({ message: 'نام کاربری باید از نوع رشته باشد.' })\n  @MinLength(5, { message: 'نام کاربری باید بیشتر از ۵ حرف باشد' })\n  @MaxLength(12, { message: 'نام کاربری باید کمتر از ۱۲ حرف باشد' })\n  username: string;\n\n  @IsNotEmpty({ message: 'یک رمز وارد کنید.' })\n  @IsString({ message: 'رمز عبور باید به صورت رشته باشد' })\n  @MinLength(8, { message: 'نام کاربری باید بیشتر از ۸ حرف باشد.' })\n  @MaxLength(20, { message: 'نام کابری باید کمتر از ۲۰ حرف باشد' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message:\n      'رمز عبور بسیار ضعیف است و باید متشکل از یک حرف بزرگ، یک عدد و یک علامت باشد.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdDateTime\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isTicking\n                            \n                            \n                                parent\n                            \n                            \n                                title\n                            \n                            \n                                usedDate\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DateEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTicking\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined, {nullable: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/task.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from 'src/users/user.entity';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { DateEntity } from './date.entity';\n\n@Entity()\nexport class Task extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column()\n  title: string;\n  @Column({ default: false })\n  isTicking: boolean;\n  @ManyToOne(() => Task, (task) => task.id, { nullable: true, cascade: true })\n  parent: Task;\n  @ManyToOne(() => User, (user) => user.task)\n  user: User;\n  @Column({\n    default: () => 'CURRENT_TIMESTAMP',\n    type: 'varchar',\n  })\n  createdDateTime: Date;\n  @OneToMany(() => DateEntity, (date) => date.task, {\n    cascade: true,\n    eager: true,\n  })\n  date: DateEntity;\n  @Column('text', { nullable: true })\n  description: string;\n  @Column({\n    type: 'varchar',\n  })\n  usedDate: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskWithSubTasks.html":{"url":"interfaces/TaskWithSubTasks.html","title":"interface - TaskWithSubTasks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TaskWithSubTasks\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/task.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            subTasks\n                                        \n                                \n                                \n                                        \n                                            task\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        subTasks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subTasks:         Task[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Task[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        task\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        task:         Task\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Task\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Task } from 'src/tasks/task.entity';\n\nexport interface TaskWithSubTasks {\n  task: Task;\n  subTasks: Task[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addDescriptionToTask\n                            \n                            \n                                    Async\n                                addTimeToTask\n                            \n                            \n                                    Async\n                                check\n                            \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteDate\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                editTimeOfTask\n                            \n                            \n                                    Async\n                                getDatesOfADay\n                            \n                            \n                                    Async\n                                getTasksNames\n                            \n                            \n                                    Async\n                                getTimeEditLimitation\n                            \n                            \n                                    Async\n                                getTodayTasks\n                            \n                            \n                                    Async\n                                getTsaksOfADay\n                            \n                            \n                                    Async\n                                removeTaskFromToday\n                            \n                            \n                                    Async\n                                renameTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addDescriptionToTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    addDescriptionToTask(addDescriptionDTO: AddDescriptionDTO, currentUser: CurrentUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/addDescriptionToTask')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    addDescriptionDTO\n                                    \n                                                AddDescriptionDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addTimeToTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTimeToTask(id: number, currentUser: CurrentUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/addTimeToTask')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        check\n                        \n                    \n                \n            \n            \n                \n                    \n                    check(currentUser: CurrentUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/Check')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDTO: CreateTaskDTO, currentUser: CurrentUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/createTask')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDTO\n                                    \n                                                CreateTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteDate(currentUser: CurrentUser, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/deleteDate')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(id: number, currentUser: CurrentUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/deleteTask')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editTimeOfTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    editTimeOfTask(currentUser: CurrentUser, editTimeOfTaskDTO: EditTimeOfTaskDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/editTimeOfTask')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    editTimeOfTaskDTO\n                                    \n                                                EditTimeOfTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDatesOfADay\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDatesOfADay(currentUser: CurrentUser, date: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/getDatesOfADay')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTasksNames\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasksNames(currentUser: CurrentUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getTasksNames')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTimeEditLimitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimeEditLimitation(currentUser: CurrentUser, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/getTimeEditLimitation')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTodayTasks\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTodayTasks(currentUser: CurrentUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getTodayTasks')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTsaksOfADay\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTsaksOfADay(currentUser: CurrentUser, date: Date)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/getTasksOfADay')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeTaskFromToday\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTaskFromToday(currentUser: CurrentUser, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/removeTaskFromToday')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        renameTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    renameTask(renameTaskDTO: RenameTaskDTO, currentUser: CurrentUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/renameTask')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    renameTaskDTO\n                                    \n                                                RenameTaskDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { CurrentUser } from 'src/interfaces/current-user.interface';\nimport { ResponseMessage } from 'src/interfaces/response-message.interface';\nimport { TaskWithSubTasks } from 'src/interfaces/task.interface';\nimport { TimeEditLimitation } from 'src/interfaces/time-edit-limitation.interface';\nimport { GetUser } from 'src/users/get-user.decorator';\nimport { JwtAuthGuard } from 'src/users/jwt-auth.guard';\nimport { DateEntity } from './date.entity';\nimport { AddDescriptionDTO } from './dto/add-description.dto';\nimport { CreateTaskDTO } from './dto/create-task.dto';\nimport { EditTimeOfTaskDTO } from './dto/edit-time-of-task.dto';\nimport { RenameTaskDTO } from './dto/rename-task.dto';\nimport { Task } from './task.entity';\nimport { TasksService } from './tasks.service';\nimport { Timesheet } from './timesheet.entity';\n\n@UseGuards(JwtAuthGuard)\n@Controller('tasks')\nexport class TasksController {\n  constructor(private tasksService: TasksService) {}\n\n  @Post('/createTask')\n  async createTask(\n    @Body() createTaskDTO: CreateTaskDTO,\n    @GetUser() currentUser: CurrentUser,\n  ): Promise {\n    return this.tasksService.createTask(\n      currentUser,\n      createTaskDTO.title,\n      createTaskDTO.parentId,\n      createTaskDTO.id,\n    );\n  }\n\n  @Get('/getTasksNames')\n  async getTasksNames(@GetUser() currentUser: CurrentUser): Promise {\n    return this.tasksService.getTasksNames(currentUser);\n  }\n\n  @Post('/addTimeToTask')\n  async addTimeToTask(\n    @Body('id') id: number,\n    @GetUser() currentUser: CurrentUser,\n  ): Promise {\n    return this.tasksService.addTimeToTask(currentUser, id);\n  }\n\n  @Patch('/renameTask')\n  async renameTask(\n    @Body() renameTaskDTO: RenameTaskDTO,\n    @GetUser() currentUser: CurrentUser,\n  ): Promise {\n    return this.tasksService.renameTask(\n      currentUser,\n      renameTaskDTO.id,\n      renameTaskDTO.title,\n    );\n  }\n\n  @Delete('/deleteTask')\n  async deleteTask(\n    @Body() id: number,\n    @GetUser() currentUser: CurrentUser,\n  ): Promise {\n    return this.tasksService.deleteTask(currentUser, id);\n  }\n\n  @Patch('/addDescriptionToTask')\n  async addDescriptionToTask(\n    @Body() addDescriptionDTO: AddDescriptionDTO,\n    @GetUser() currentUser: CurrentUser,\n  ): Promise {\n    return this.tasksService.addDescriptionToTask(\n      currentUser,\n      addDescriptionDTO.id,\n      addDescriptionDTO.content,\n    );\n  }\n\n  @Get('/Check')\n  async check(\n    @GetUser() currentUser: CurrentUser,\n  ): Promise {\n    return this.tasksService.check(currentUser);\n  }\n\n  @Post('/getTimeEditLimitation')\n  async getTimeEditLimitation(\n    @GetUser() currentUser: CurrentUser,\n    @Body() id: number,\n  ): Promise {\n    return this.tasksService.getTimeEditLimitation(currentUser, id);\n  }\n  @Post('/editTimeOfTask')\n  async editTimeOfTask(\n    @GetUser() currentUser: CurrentUser,\n    @Body() editTimeOfTaskDTO: EditTimeOfTaskDTO,\n  ): Promise {\n    return this.tasksService.editTimeOfTask(\n      currentUser,\n      editTimeOfTaskDTO.id,\n      editTimeOfTaskDTO.time,\n    );\n  }\n\n  @Get('/getTodayTasks')\n  async getTodayTasks(\n    @GetUser() currentUser: CurrentUser,\n  ): Promise {\n    return this.tasksService.getTodayTasks(currentUser);\n  }\n\n  @Post('/getTasksOfADay')\n  async getTsaksOfADay(\n    @GetUser() currentUser: CurrentUser,\n    @Body() date: Date,\n  ): Promise {\n    return this.tasksService.getTasksOfADay(currentUser, date);\n  }\n\n  @Post('/getDatesOfADay')\n  async getDatesOfADay(\n    @GetUser() currentUser: CurrentUser,\n    @Body() date: Date,\n  ): Promise {\n    return this.tasksService.getDatesOfADay(currentUser, date);\n  }\n\n  @Delete('/deleteDate')\n  async deleteDate(\n    @GetUser() currentUser: CurrentUser,\n    @Body('id') id: number,\n  ): Promise {\n    return this.tasksService.deleteDate(currentUser, id);\n  }\n\n  @Delete('/removeTaskFromToday')\n  async removeTaskFromToday(\n    @GetUser() currentUser: CurrentUser,\n    @Body('id') id: number,\n  ): Promise {\n    return this.tasksService.removeTaskFromToday(currentUser, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_TasksModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nUsersModule->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from 'src/users/users.module';\nimport { DateEntity } from './date.entity';\nimport { Task } from './task.entity';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\nimport { Timesheet } from './timesheet.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Task, DateEntity, Timesheet]),\n    UsersModule,\n  ],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addDescriptionToTask\n                            \n                            \n                                    Async\n                                addTimeToTask\n                            \n                            \n                                    Async\n                                check\n                            \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteDate\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                editTimeOfTask\n                            \n                            \n                                    Async\n                                getDatesOfADay\n                            \n                            \n                                    Async\n                                getTasksNames\n                            \n                            \n                                    Async\n                                getTasksOfADay\n                            \n                            \n                                    Async\n                                getTimeEditLimitation\n                            \n                            \n                                    Async\n                                getTodayTasks\n                            \n                            \n                                    Async\n                                removeTaskFromToday\n                            \n                            \n                                    Async\n                                renameTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tasksRepositiory: Repository, dateRepository: Repository, timesheetRepository: Repository, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tasksRepositiory\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dateRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timesheetRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addDescriptionToTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    addDescriptionToTask(currentUser: CurrentUser, id: number, content: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addTimeToTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    addTimeToTask(currentUser: CurrentUser, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        check\n                        \n                    \n                \n            \n            \n                \n                    \n                    check(currentUser: CurrentUser)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(currentUser: CurrentUser, title: string, parentId: number, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parentId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteDate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteDate(currentUser: CurrentUser, dateId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:439\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dateId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(currentUser: CurrentUser, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        editTimeOfTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    editTimeOfTask(currentUser: CurrentUser, id: number, time: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:329\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    time\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDatesOfADay\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDatesOfADay(currentUser: CurrentUser, date: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:418\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTasksNames\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasksNames(currentUser: CurrentUser)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTasksOfADay\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasksOfADay(currentUser: CurrentUser, theDate: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:358\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    theDate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTimeEditLimitation\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimeEditLimitation(currentUser: CurrentUser, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTodayTasks\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTodayTasks(currentUser: CurrentUser)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:354\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeTaskFromToday\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeTaskFromToday(currentUser: CurrentUser, taskId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:460\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    taskId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        renameTask\n                        \n                    \n                \n            \n            \n                \n                    \n                    renameTask(currentUser: CurrentUser, id: number, title: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotAcceptableException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CurrentUser } from 'src/interfaces/current-user.interface';\nimport { ResponseMessage } from 'src/interfaces/response-message.interface';\nimport { TaskWithSubTasks } from 'src/interfaces/task.interface';\nimport { TimeEditLimitation } from 'src/interfaces/time-edit-limitation.interface';\nimport { UsersService } from 'src/users/users.service';\nimport { Between, LessThan, MoreThan, Repository } from 'typeorm';\nimport { DateEntity } from './date.entity';\nimport { Task } from './task.entity';\nimport { Timesheet } from './timesheet.entity';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(Task)\n    private tasksRepositiory: Repository,\n    @InjectRepository(DateEntity)\n    private dateRepository: Repository,\n    @InjectRepository(Timesheet)\n    private timesheetRepository: Repository,\n    private userService: UsersService,\n  ) {}\n\n  async createTask(\n    currentUser: CurrentUser,\n    title: string,\n    parentId: number,\n    id: number,\n  ): Promise {\n    let task: Task;\n    const user = await this.userService.findOne(currentUser.username);\n    if (id) {\n      task = await this.tasksRepositiory.findOne(\n        { id },\n        { relations: ['user', 'parent'] },\n      );\n      if (task.user.username !== user.username)\n        throw new UnauthorizedException('شما به این عملیات دسترسی ندارید.');\n    } else {\n      task = new Task();\n    }\n    task.title = title;\n    if (parentId) {\n      const parent = await this.tasksRepositiory.findOne({ id: parentId });\n      if (!parent) {\n        throw new NotFoundException('تسک مورد نظر یافت نشد.');\n      }\n      task.parent = parent;\n      task.parent.usedDate = new Date();\n    }\n    task.user = user;\n    task.usedDate = new Date();\n\n    try {\n      task.save();\n    } catch (error) {\n      console.error(error);\n    }\n    return { message: 'عملیات موفقیت آمیز بود.' };\n  }\n\n  async getTasksNames(currentUser: CurrentUser): Promise {\n    const user = await this.userService.findOne(currentUser.username);\n    return this.tasksRepositiory\n      .createQueryBuilder('task')\n      .select(['task.id', 'task.title'])\n      .innerJoin('task.user', 'user')\n      .where('user.username = :username', { username: user.username })\n      .andWhere('task.parentId is null')\n      .getMany();\n  }\n\n  async renameTask(\n    currentUser: CurrentUser,\n    id: number,\n    title: string,\n  ): Promise {\n    const task = await this.tasksRepositiory.findOne(\n      { id },\n      { relations: ['user'] },\n    );\n    if (!task) {\n      throw new NotFoundException('تسک مورد نظر یافت نشد');\n    }\n    const user = await this.userService.findOne(currentUser.username);\n    if (!user || task.user.username !== user.username) {\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید');\n    }\n    task.title = title;\n    try {\n      task.save();\n    } catch (error) {\n      console.error(error);\n    }\n    return { message: 'عملیات موفقیت آمیز بود.' };\n  }\n\n  async deleteTask(\n    currentUser: CurrentUser,\n    id: number,\n  ): Promise {\n    const task = await this.tasksRepositiory.findOne({ id });\n    if (!task) {\n      throw new NotFoundException('تسک مورد نظر یافت نشد.');\n    }\n    const user = await this.userService.findOne(currentUser.username);\n    if (task.user.username !== user.username) {\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید');\n    }\n    try {\n      this.tasksRepositiory.delete({ id });\n    } catch (error) {\n      console.error(error);\n    }\n    return { message: 'عملیات موفقیت آمیز بود.' };\n  }\n\n  async addDescriptionToTask(\n    currentUser: CurrentUser,\n    id: number,\n    content: string,\n  ): Promise {\n    const task = await this.tasksRepositiory.findOne({ id });\n    if (!task) {\n      throw new NotFoundException('تسک مورد نظر یافت نشد');\n    }\n    const user = await this.userService.findOne(currentUser.username);\n    if (!user || user.username !== task.user.username) {\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید.');\n    }\n    task.description = content;\n\n    try {\n      task.save();\n    } catch (error) {\n      console.error(error);\n    }\n    return { message: 'عملیات موفقیت آمیز بود.' };\n  }\n\n  async check(\n    currentUser: CurrentUser,\n  ): Promise {\n    const user = await this.userService.findOne(currentUser.username);\n    if (!user) {\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید');\n    }\n\n    const lastCheck = await this.timesheetRepository.findOne({\n      join: {\n        alias: 'timesheet',\n        innerJoin: {\n          user: 'timesheet.user',\n        },\n      },\n      order: {\n        date: 'DESC',\n      },\n      where: {\n        user,\n      },\n    });\n\n    const task = await this.tasksRepositiory\n      .createQueryBuilder('task')\n      .select()\n      .innerJoin('task.date', 'date')\n      .innerJoin('task.user', 'user')\n      .where('user.id = :id', { id: user.id })\n      .andWhere('task.isTicking = :isTicking', { isTicking: true })\n      .orderBy('date.date', 'DESC')\n      .getOne();\n\n    const time = new Timesheet();\n    time.isCheckIn = lastCheck ? !lastCheck.isCheckIn : true;\n    if (!time.isCheckIn && task) {\n      task.isTicking = false;\n      const date = new DateEntity();\n      date.isBeginning = false;\n      date.task = task;\n      try {\n        date.save();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    time.user = user;\n    try {\n      time.save();\n    } catch (error) {\n      console.error(error);\n    }\n    return { message: 'عملیات موفقیت آمیز بود.', isCheckIn: time.isCheckIn };\n  }\n\n  async addTimeToTask(\n    currentUser: CurrentUser,\n    id: number,\n  ): Promise {\n    const tasks = await this.tasksRepositiory.find({ relations: ['date'] });\n    console.table(tasks);\n    const task = await this.tasksRepositiory.findOne(\n      { id },\n      { relations: ['user'] },\n    );\n    if (!task) {\n      throw new NotFoundException('تسک مورد نظر یافت نشد.');\n    }\n    const user = await this.userService.findOne(currentUser.username);\n    if (!user || task.user.username !== user.username) {\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید.');\n    }\n    const lastCheck = await this.timesheetRepository.findOne({\n      relations: ['user', 'date'],\n      order: {\n        date: 'DESC',\n      },\n      where: {\n        user: {\n          username: user.username,\n        },\n      },\n    });\n    const today = new Date();\n    if (\n      !lastCheck ||\n      lastCheck.date.setHours(0, 0, 0, 0) !== today.setHours(0, 0, 0, 0)\n    ) {\n      throw new NotAcceptableException('برای امروز ورودی ثبت نشده است.');\n    } else if (\n      lastCheck.date.setHours(0, 0, 0, 0) === today.setHours(0, 0, 0, 0) &&\n      !lastCheck.isCheckIn\n    ) {\n      throw new NotAcceptableException('ورود ثبت نشده است.');\n    }\n    const lastDate = await this.dateRepository.findOne({\n      order: {\n        date: 'DESC',\n      },\n      where: {\n        task: {\n          id: task.id,\n        },\n      },\n    });\n    const date = new DateEntity();\n    if (lastDate || lastDate.isBeginning) {\n      date.isBeginning = false;\n    }\n    date.task = task;\n    try {\n      date.save();\n    } catch (error) {\n      console.error(error);\n    }\n\n    return { message: 'عملیات موفقیت آمیز بود.' };\n  }\n  async getTimeEditLimitation(\n    currentUser: CurrentUser,\n    id: number,\n  ): Promise {\n    const date = await this.dateRepository.findOne({\n      id,\n    });\n    if (!date) {\n      throw new NotFoundException('زمان مورد نظر یافت نشد');\n    }\n\n    const startOfTheDay = new Date(date.date.valueOf()).setHours(0, 0, 0, 0);\n\n    const user = await this.userService.findOne(currentUser.username);\n    if (!user || user.username !== date.task.user.username)\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید.');\n    let downLimit: Date;\n    let upLimit: Date;\n\n    const previousDate = await this.dateRepository.findOne({\n      where: {\n        task: date.task,\n        date: LessThan(date.date),\n      },\n    });\n\n    downLimit = new Date(previousDate.date.valueOf());\n\n    const nextDate = await this.dateRepository.findOne({\n      where: {\n        task: date.task,\n        date: MoreThan(date.date),\n      },\n    });\n\n    upLimit = new Date(nextDate.date.valueOf());\n\n    if (previousDate.date.setHours(0, 0, 0, 0) !== startOfTheDay) {\n      const checkIn = await this.timesheetRepository.findOne({\n        where: {\n          user: date.task.user,\n          date: LessThan(date.date),\n        },\n      });\n      downLimit = checkIn ? checkIn.date : new Date(startOfTheDay.valueOf());\n    }\n\n    if (nextDate.date.setHours(0, 0, 0, 0) !== date.date.setHours(0, 0, 0, 0)) {\n      const checkOut = await this.timesheetRepository.findOne({\n        where: {\n          user: date.task.user,\n          date: MoreThan(date.date),\n        },\n      });\n      upLimit = checkOut\n        ? checkOut.date\n        : new Date(\n            new Date(startOfTheDay.valueOf()).setHours(23, 59, 59).valueOf(),\n          );\n    }\n\n    return { upLimit, downLimit };\n  }\n\n  async editTimeOfTask(\n    currentUser: CurrentUser,\n    id: number,\n    time: Date,\n  ): Promise {\n    const limitations = await this.getTimeEditLimitation(currentUser, id);\n\n    const date = await this.dateRepository.findOne({\n      id,\n    });\n\n    if (limitations.downLimit > time || limitations.upLimit  {\n    return this.getTasksOfADay(currentUser, new Date());\n  }\n\n  async getTasksOfADay(\n    currentUser: CurrentUser,\n    theDate: Date,\n  ): Promise {\n    const user = await this.userService.findOne(currentUser.username);\n    if (!user)\n      throw new UnauthorizedException('شما به این قسمت دسترسی ندارید.');\n    const todayTasks: TaskWithSubTasks[] = [];\n    const tasks = await this.tasksRepositiory.find({\n      join: {\n        alias: 'task',\n        innerJoin: {\n          user: 'task.user',\n        },\n        leftJoinAndSelect: {\n          date: 'task.date',\n          parent: 'task.parent',\n        },\n      },\n      where: {\n        user: user,\n        parent: null,\n        usedDate: Between(\n          new Date(theDate.setHours(0, 0, 0, 0)),\n          new Date(theDate.setHours(23, 59, 59, 999)),\n        ),\n      },\n    });\n\n    await Promise.all(\n      tasks.map(async (el) => {\n        const subTasks = await this.tasksRepositiory.find({\n          join: {\n            alias: 'task',\n            innerJoin: {\n              user: 'task.user',\n              parent: 'task.parent',\n            },\n            leftJoinAndSelect: {\n              date: 'task.date',\n            },\n          },\n          where: {\n            user: user,\n            parent: el.id,\n            usedDate: Between(\n              new Date(theDate.setHours(0, 0, 0, 0)),\n              new Date(theDate.setHours(23, 59, 59, 999)),\n            ),\n          },\n        });\n        todayTasks.push({\n          task: el,\n          subTasks,\n        });\n      }),\n    );\n    return todayTasks;\n  }\n\n  async getDatesOfADay(\n    currentUser: CurrentUser,\n    date: Date,\n  ): Promise {\n    const user = await this.userService.findOne(currentUser.username);\n    if (!user)\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید.');\n\n    const dates = await this.dateRepository.find({\n      where: {\n        task: {\n          user: user,\n        },\n        date: Between(\n          new Date(date.setHours(0, 0, 0, 0)),\n          new Date(date.setHours(23, 59, 59, 999)),\n        ),\n      },\n    });\n    return dates;\n  }\n  async deleteDate(\n    currentUser: CurrentUser,\n    dateId: number,\n  ): Promise {\n    const user = await this.userService.findOne(currentUser.username);\n    if (!user)\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید');\n\n    const date = await this.dateRepository.findOne(\n      { id: dateId },\n      { relations: ['task', 'user'] },\n    );\n    if (!date) throw new NotFoundException('زمان مورد نظر یافت نشد.');\n\n    if (date.task.user.username !== user.username)\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید');\n    await this.dateRepository.delete({ id: date.id });\n\n    return { message: 'عملیات موفقیت‌آمیز بود.' };\n  }\n\n  async removeTaskFromToday(\n    currentUser: CurrentUser,\n    taskId: number,\n  ): Promise {\n    const user = await this.userService.findOne(currentUser.username);\n    if (!user)\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید');\n    const task = await this.tasksRepositiory.findOne(\n      { id: taskId },\n      { relations: ['date', 'user'] },\n    );\n    if (!task) throw new NotFoundException('تسک مورد نظر یافت نشد.');\n    if (user.username !== task.user.username)\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید');\n    if (new Date(task.usedDate).valueOf() \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimeEditLimitation.html":{"url":"interfaces/TimeEditLimitation.html","title":"interface - TimeEditLimitation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimeEditLimitation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interfaces/time-edit-limitation.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            downLimit\n                                        \n                                \n                                \n                                        \n                                            upLimit\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        downLimit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        downLimit:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        upLimit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        upLimit:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TimeEditLimitation {\n  downLimit: Date;\n  upLimit: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Timesheet.html":{"url":"classes/Timesheet.html","title":"class - Timesheet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Timesheet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/timesheet.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                id\n                            \n                            \n                                isCheckIn\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/timesheet.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/timesheet.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isCheckIn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/timesheet.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/timesheet.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from 'src/users/user.entity';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Timesheet extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column('varchar', {\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  date: Date;\n  @Column({ default: true })\n  isCheckIn: boolean;\n  @ManyToOne(() => User, (user) => user.timesheet)\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDTO.html":{"url":"classes/UpdateProfileDTO.html","title":"class - UpdateProfileDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'یک ایمیل وارد کنید'})@IsEmail({}, {message: 'لطفا یک ایمیل معتبر وارد کنید'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-profile.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'یک نام وارد کنید'})@IsString({message: 'نام باید از نوع رشته باشد'})@MinLength(4, {message: 'نام باید بیشتر از ۴ حرف باشد.'})@MaxLength(28, {message: 'نام باید کمتر از ۲۸ حرف باشد'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-profile.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  MinLength,\n  MaxLength,\n  IsEmail,\n} from 'class-validator';\n\nexport class UpdateProfileDTO {\n  @IsNotEmpty({ message: 'یک نام وارد کنید' })\n  @IsString({ message: 'نام باید از نوع رشته باشد' })\n  @MinLength(4, {\n    message: 'نام باید بیشتر از ۴ حرف باشد.',\n  })\n  @MaxLength(28, {\n    message: 'نام باید کمتر از ۲۸ حرف باشد',\n  })\n  name: string;\n\n  @IsNotEmpty({ message: 'یک ایمیل وارد کنید' })\n  @IsEmail({}, { message: 'لطفا یک ایمیل معتبر وارد کنید' })\n  email: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdDateTime\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                task\n                            \n                            \n                                timesheet\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdDateTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined, type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        task\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Task\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timesheet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Timesheet\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, undefined, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/user.entity.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as bcrypt from 'bcrypt';\nimport { Task } from 'src/tasks/task.entity';\nimport { Timesheet } from 'src/tasks/timesheet.entity';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  Unique,\n} from 'typeorm';\n\n@Entity()\n@Unique(['username', 'email'])\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n  @Column({ nullable: true })\n  name: string;\n  @Column()\n  username: string;\n  @Column({ select: false })\n  password: string;\n  @Column({ nullable: true })\n  email: string;\n  @Column({ default: true })\n  isActive: boolean;\n  @Column({ default: () => 'CURRENT_TIMESTAMP', type: 'varchar' })\n  createdDateTime: Date;\n  @OneToMany(() => Task, (task) => task.user)\n  task: Task;\n  @OneToMany(() => Timesheet, (timesheet) => timesheet.user, { cascade: true })\n  timesheet: Timesheet;\n\n  async validatePassword(\n    password: string,\n    hashedPassword: string,\n  ): Promise {\n    let hash: boolean;\n    try {\n      hash = await bcrypt.compare(password, hashedPassword);\n    } catch (error) {\n      console.error(error);\n    }\n    return hash;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUser: CurrentUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile/getProfile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginUserDTO: LoginUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('auth/login')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserDTO\n                                    \n                                                LoginUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(signupUserDTO: SignupUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('auth/signup')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signupUserDTO\n                                    \n                                                SignupUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(currentUser: CurrentUser, updateProfileDTO: UpdateProfileDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('profile/updateProfile')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProfileDTO\n                                    \n                                                UpdateProfileDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { CurrentUser } from 'src/interfaces/current-user.interface';\nimport { LoginResponse } from 'src/interfaces/login.interface';\nimport { ResponseMessage } from 'src/interfaces/response-message.interface';\nimport { LoginUserDTO } from './dto/login-user.dto';\nimport { SignupUserDTO } from './dto/signup-user.dto';\nimport { UpdateProfileDTO } from './dto/update-profile.dto';\nimport { GetUser } from './get-user.decorator';\nimport { User } from './user.entity';\nimport { UsersService } from './users.service';\n\n@Controller()\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @Post('auth/login')\n  async login(@Body() loginUserDTO: LoginUserDTO): Promise {\n    return this.usersService.login(loginUserDTO);\n  }\n\n  @Post('auth/signup')\n  async signup(@Body() signupUserDTO: SignupUserDTO): Promise {\n    return this.usersService.signup(signupUserDTO);\n  }\n\n  @Post('profile/updateProfile')\n  async updateProfile(\n    @GetUser() currentUser: CurrentUser,\n    @Body() updateProfileDTO: UpdateProfileDTO,\n  ): Promise {\n    return this.usersService.updateProfile(currentUser, updateProfileDTO);\n  }\n\n  @Get('profile/getProfile')\n  async getProfile(@GetUser() currentUser: CurrentUser): Promise {\n    return this.usersService.getProfile(currentUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUsersModule -->\n\nJwtStrategy->UsersModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nUsersModule -->\n\nLocalStrategy->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { jwtConstants } from 'src/config/constants';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\nimport { User } from './user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '1y' },\n    }),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService, LocalStrategy, JwtStrategy],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(currentUser: CurrentUser)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(payload: LoginUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                LoginUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(signupUserDTO: SignupUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signupUserDTO\n                                    \n                                                SignupUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfile(currentUser: CurrentUser, updateProfileDTO: UpdateProfileDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                CurrentUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProfileDTO\n                                    \n                                                UpdateProfileDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SignupUserDTO } from './dto/signup-user.dto';\nimport { getRepository, Repository } from 'typeorm';\nimport { User } from './user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { jwtConstants } from 'src/config/constants';\nimport { LoginUserDTO } from './dto/login-user.dto';\nimport { CurrentUser } from 'src/interfaces/current-user.interface';\nimport { UpdateProfileDTO } from './dto/update-profile.dto';\nimport { ResponseMessage } from 'src/interfaces/response-message.interface';\nimport { LoginResponse } from 'src/interfaces/login.interface';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private jwtService: JwtService,\n  ) {}\n\n  async findAll(): Promise {\n    const users = await this.userRepository.find();\n    users.map((user) => delete user.password);\n    return users;\n  }\n\n  findOne(username: string): Promise {\n    return this.userRepository.findOne({\n      where: {\n        username,\n      },\n    });\n  }\n\n  async signup(signupUserDTO: SignupUserDTO): Promise {\n    const { password, username } = signupUserDTO;\n    const isUserSignedUp = await this.findOne(username);\n    if (isUserSignedUp)\n      throw new ConflictException('این یوزرنیم قبلا استفاده شده است.');\n    const user = new User();\n    user.password = await bcrypt.hash(password, await bcrypt.genSalt(10));\n    user.username = username;\n\n    try {\n      await user.save();\n    } catch (error) {\n      if (error.errno === 1062) {\n        throw new ConflictException('این کاربر قبلا ثبت نام کرده است.');\n      }\n      throw new InternalServerErrorException();\n    }\n\n    const info = { username: user.username, sub: user.id };\n    return {\n      message: 'عملیات با موفقیت انجام شد',\n      access_token: this.jwtService.sign(info, {\n        secret: jwtConstants.secret,\n        audience: 'admin',\n      }),\n    };\n  }\n\n  async remove(id: string): Promise {\n    await this.userRepository.update(id, { isActive: false });\n  }\n\n  async validateUser(username: string, pass: string): Promise {\n    const user = await this.findOne(username);\n    if (user && user.password === pass) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(payload: LoginUserDTO): Promise {\n    const user = await await getRepository(User)\n      .createQueryBuilder('user')\n      .where('user.username = :username', { username: payload.username })\n      .select()\n      .addSelect('user.password')\n      .getOne();\n    if (!user)\n      throw new UnauthorizedException('نام کاربری یا رمز عبور اشتباه است.');\n    if (!user.isActive)\n      throw new UnauthorizedException('حساب کاربری غیرفعال شده است');\n    if (!user.validatePassword(payload.password, user.password))\n      throw new UnauthorizedException('نام کاربری یا رمز عبور اشتباه است.');\n\n    const info = { username: user.username, sub: user.id };\n    return {\n      message: 'عملیات با موفقیت انجام شد',\n      access_token: this.jwtService.sign(info, {\n        secret: jwtConstants.secret,\n        audience: 'admin',\n      }),\n    };\n  }\n\n  async updateProfile(\n    currentUser: CurrentUser,\n    updateProfileDTO: UpdateProfileDTO,\n  ): Promise {\n    const user = await this.findOne(currentUser.username);\n    if (!user)\n      throw new UnauthorizedException('شما به این عملیات دسترسی ندارید.');\n    user.name = updateProfileDTO.name;\n    user.email = updateProfileDTO.email;\n\n    try {\n      user.save();\n    } catch (error) {\n      console.error(error);\n    }\n    return { message: 'عملیات موفقیت آمیز بود.' };\n  }\n\n  async getProfile(currentUser: CurrentUser): Promise {\n    const user = await this.findOne(currentUser.username);\n    if (!user) throw new NotFoundException('کاربر مورد نظر یافت نشد.');\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interfaces/current-user.interface.ts\n            \n            interface\n            CurrentUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interfaces/login.interface.ts\n            \n            interface\n            LoginResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interfaces/response-message.interface.ts\n            \n            interface\n            ResponseMessage\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interfaces/task.interface.ts\n            \n            interface\n            TaskWithSubTasks\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interfaces/time-edit-limitation.interface.ts\n            \n            interface\n            TimeEditLimitation\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/date.entity.ts\n            \n            class\n            DateEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tasks/dto/add-description.dto.ts\n            \n            class\n            AddDescriptionDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/dto/edit-time-of-task.dto.ts\n            \n            class\n            EditTimeOfTaskDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/dto/rename-task.dto.ts\n            \n            class\n            RenameTaskDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/tasks/timesheet.entity.ts\n            \n            class\n            Timesheet\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/signup-user.dto.ts\n            \n            class\n            SignupUserDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.1\n        \n            @nestjs/core : ^8.0.1\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.1\n        \n            @nestjs/typeorm : ^8.0.1\n        \n            bcrypt : ^5.0.1\n        \n            class-validator : ^0.13.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            typeorm : ^0.2.34\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nTasksModule\n\nTasksModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTasksModule -->\n\nUsersModule->TasksModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUsersModule -->\n\nJwtStrategy->UsersModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nUsersModule -->\n\nLocalStrategy->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/get-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): User => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n  // export const GetUser = createParamDecorator(\n  //   (data, req): User => {\n  //     console.log(req);\n  //     return req.user;\n  //   },\n)\n                    \n                \n\n\n        \n    \n\n    src/config/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        jwtConstants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  secret: 'secretKey',\n  adminSecret: '12345657543@3i4#234iADSj3.adsf',\n}\n                    \n                \n\n\n        \n    \n\n    src/config/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        typeOrmConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT) || 54321,\n  username: process.env.DB_USER || 'aldeon',\n  password: process.env.DB_PASSWORD || 'password',\n  database: process.env.DB_NAME || 'tasktracker',\n  entities: [__dirname + '/../**/*.entity.{ts,js}'],\n  extra: { charset: 'utf8mb4_unicode_ci' },\n  // TODO: synchronize must be false in production phase\n  synchronize: process.env.NODE_ENV !== 'production',\n  ssl: {\n    rejectUnauthorized: false,\n  },\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
